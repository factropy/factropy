
function()
	function tree(name, scale, color)
		add_spec({
			name = name,
			title = "Tree",
			build = false,
			collision = [0, 0, 0, 2, 5.0*scale, 2],
			junk = true,
			health = 150,
			parts = [{
				color = color,
				translate = [0,-2.5*scale,0],
				scale = scale,
				tree = true,
				lods = [
					["models/tree-canopy-hd.stl", high, shadow],
					["models/tree-canopy-ld.stl", medium, shadow],
					["models/tree-canopy-ld2.stl", low, noshadow],
					["models/tree-canopy-vld.stl", verylow, noshadow],
				],
			}],
			materials = {
				"log" = 1,
			},
		})
	end

	for i in 2
		tree("treeAA$i", 1.0 + (0.1*i), 0xCBA109FF)
		tree("treeAB$i", 1.0 + (0.1*i), 0xBF7407FF)
	end

	for i in 2
		tree("treeBA$i", 1.5 + (0.1*i), 0x228B22FF)
		tree("treeBB$i", 1.5 + (0.1*i), 0x556B2FFF)
	end
end()

function conveyorTier(tier, maxTier, steps, color, chevronColor)

	names = {
		conveyor = "conveyor-$(tier)"
		conveyorLeft = "conveyor-left-$(tier)"
		conveyorRight = "conveyor-right-$(tier)"
		unveyorEntry = "unveyor-entry-$(tier)"
		unveyorExit = "unveyor-exit-$(tier)"
		loader = "loader-$(tier)"
		unloader = "unloader-$(tier)"
		balancer = "balancer-$(tier)"
		tubeSmall = "tube-small-$(tier)"
		tubeSmallAlt = "tube-small-alt-$(tier)"
		tubeMedium = "tube-medium-$(tier)"
		tubeMediumAlt = "tube-medium-alt-$(tier)"
		tubeLarge = "tube-large-$(tier)"
		tubeLargeAlt = "tube-large-alt-$(tier)"
		conveyorUpgrade = nil
		conveyorLeftUpgrade = nil
		conveyorRightUpgrade = nil
		unveyorEntryUpgrade = nil
		unveyorExitUpgrade = nil
		loaderUpgrade = nil
		unloaderUpgrade = nil
		balancerUpgrade = nil
		tubeSmallUpgrade = nil
		tubeSmallAltUpgrade = nil
		tubeMediumUpgrade = nil
		tubeMediumAltUpgrade = nil
		tubeLargeUpgrade = nil
		tubeLargeAltUpgrade = nil
	}

	if tier < maxTier
		next = tier+1
		names.conveyorUpgrade = "conveyor-$(next)"
		names.conveyorLeftUpgrade = "conveyor-left-$(next)"
		names.conveyorRightUpgrade = "conveyor-right-$(next)"
		names.unveyorEntryUpgrade = "unveyor-entry-$(next)"
		names.unveyorExitUpgrade = "unveyor-exit-$(next)"
		names.loaderUpgrade = "loader-$(next)"
		names.unloaderUpgrade = "unloader-$(next)"
		names.balancerUpgrade = "balancer-$(next)"
		names.tubeSmallUpgrade = "tube-small-$(next)"
		names.tubeSmallAltUpgrade = "tube-small-alt-$(next)"
		names.tubeMediumUpgrade = "tube-medium-$(next)"
		names.tubeMediumAltUpgrade = "tube-medium-alt-$(next)"
		names.tubeLargeUpgrade = "tube-large-$(next)"
		names.tubeLargeAltUpgrade = "tube-large-alt-$(next)"
	end

	upgradeCascade = [
		names.conveyor,
		names.conveyorLeft,
		names.conveyorRight,
		names.balancer,
		names.loader,
		names.unloader,
		names.tubeSmall,
		names.tubeSmallAlt,
		names.tubeMedium,
		names.tubeMediumAlt,
		names.tubeLarge,
		names.tubeLargeAlt,
	]

	surfaceColor = 0x444455ff
	ridgeColor = 0x888888ff
	pillarColor = color

	fixedPillar = {
		color = pillarColor,
		translate = [0,-1.25,0],
		scale = [0.4,1,0.4],
		lods = [
			["models/belt-pillar-ld.stl", high, shadow],
			["models/belt-pillar-ld.stl", medium, noshadow],
		],
	}

	repeatingPillar = {
		gridRepeat = 5,
		color = pillarColor,
		translate = [0,-1.25,0],
		scale = [0.4,1,0.4],
		lods = [
			["models/belt-pillar-ld.stl", high, shadow],
			["models/belt-pillar-ld.stl", medium, noshadow],
		],
	}

	materials = {
		"steel-sheet" = 1,
	}

	if tier >= 2
		materials["plastic-bar"] = 1
	end

	chevronSR = matrix_rotate(east, 90.0) * matrix_rotate(up, -90.0) * matrix_scale(1,0.1,1)

	function() // conveyor
		conveyorTransformsLeft = []
		function()
			base = south*0.5 + east*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsLeft[#conveyorTransformsLeft] = matrix_translate(base + step*i)
			end
		end()

		conveyorTransformsRight = []
		function()
			base = south*0.5 + west*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsRight[#conveyorTransformsRight] = matrix_translate(base + step*i)
			end
		end()

		ridgeTransforms = []
		function()
			base = south * 0.5
			step = north * (1.0/steps)
			for i in steps
				ridgeTransforms[#ridgeTransforms] = matrix_translate(base + step*i)
			end
			reverse(ridgeTransforms)
		end()

		add_spec({
			name = names.conveyor,
			upgrade = names.conveyorUpgrade,
			upgradeCascade = upgradeCascade,
			cycle = names.conveyorLeft,
			downward = names.unveyorEntry,
			upward = names.balancer,
			build = true,
			title = if tier > 1 "Belt (Fast)" else "Belt" end,
			toolbar = "a-b-$(tier)",
			collision = [0, 0, 0, 1, 2, 1],
			selection = [0, -0.5, 0, 1, 1, 1],
			iconD = 1.0,
			iconV = 0.5,
			rotateGhost = true,
			rotateExtant = true,
			conveyor = true,
			conveyorInput = north*0.5,
			conveyorOutput = south*0.5,
			conveyorSlotsLeft = 2,
			conveyorSlotsRight = 2,
			consumeElectricity = true,
			conveyorEnergyDrain = W(120*tier),
			conveyorTransformsLeft = conveyorTransformsLeft,
			conveyorTransformsRight = conveyorTransformsRight,
			health = 150,
			snapAlign = true,
			materials = materials,
			parts = [
				repeatingPillar,
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-1.25,0],
					scale = 0.001,
					lods = [
						["models/belt-base-hd.stl", high, shadow],
						["models/belt-base-ld.stl", medium, shadow],
					],
				},
				{
					color = surfaceColor,
					translate = [0,-1.25,0],
					scale = 0.001,
					lods = [
						["models/belt-surface-hd.stl", high, noshadow],
						["models/belt-surface-ld.stl", medium, noshadow],
						["models/belt-surface-vld.stl", verylow, noshadow],
					],
				},
				{
					color = ridgeColor,
					translate = [0,-1.25,0],
					cycler = ridgeTransforms,
					lods = [
						["models/belt-ridge-hd.stl", high, noshadow],
					],
				},
			],
		})
	end()

	function() // conveyorLeft
		conveyorTransformsLeft = []
		function()
			entry = east*0.71
			offset = south*0.5 + west*0.5
			osteps = steps+(steps/2)
			step = 90.0/osteps
			for i in osteps
				r = matrix_invert(matrix_rotate(up, step*(i+1) - 90.0))
				p = point_transform(entry, r) + offset
				d = point_transform(south, r)
				conveyorTransformsLeft[#conveyorTransformsLeft] = matrix_rotation(d) * matrix_translation(p)
			end
			reverse(conveyorTransformsLeft)
		end()

		conveyorTransformsRight = []
		function()
			entry = east*0.29
			offset = south*0.5 + west*0.5
			isteps = steps/2
			step = 90.0/isteps
			for i in isteps
				r = matrix_invert(matrix_rotate(up, step*(i+1) - 90.0))
				p = point_transform(entry, r) + offset
				d = point_transform(south, r)
				conveyorTransformsRight[#conveyorTransformsRight] = matrix_rotation(d) * matrix_translation(p)
			end
			reverse(conveyorTransformsRight)
		end()

		ridgeTransforms = []
		function()
			base = north*0.5
			a = matrix_translation(south*0.5 + west*0.5)
			step = 90.0/steps
			for i in steps
				j = steps-1-i
				r = matrix_invert(matrix_rotate(up, step*(j+1)))
				t = matrix_translation(point_transform(base, r * a))
				d = matrix_invert(matrix_rotate(up, -step * i))
				ridgeTransforms[#ridgeTransforms] = d * t
			end
			reverse(ridgeTransforms)
		end()

		add_spec({
			name = names.conveyorLeft,
			upgrade = names.conveyorLeftUpgrade,
			upgradeCascade = upgradeCascade,
			cycle = names.conveyorRight,
			followConveyor = names.conveyor,
			statsGroup = names.conveyor,
			upward = names.balancer,
			downward = names.unveyorEntry,
			build = false,
			title = if tier > 1 "Belt (Left, Fast)" else "Belt (Left)" end,
			toolbar = "a-b-$(tier)",
			collision = [0, 0, 0, 1, 2, 1],
			selection = [0, -0.5, 0, 1, 1, 1],
			iconD = 1.0,
			iconV = 0.5,
			rotateGhost = true,
			rotateExtant = true,
			conveyor = true,
			conveyorInput = west*0.5,
			conveyorOutput = south*0.5,
			conveyorSlotsLeft = 3,
			conveyorSlotsRight = 1,
			consumeElectricity = true,
			conveyorEnergyDrain = W(120*tier),
			conveyorTransformsLeft = conveyorTransformsLeft,
			conveyorTransformsRight = conveyorTransformsRight,
			health = 150,
			materials = materials,
			parts = [
				repeatingPillar,
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-1.25,0],
					scale = 0.001,
					lods = [
						["models/belt-left-base-hd.stl", high, shadow],
						["models/belt-left-base-ld.stl", medium, shadow],
					],
				},
				{
					color = surfaceColor,
					translate = [0,-1.25,0],
					scale = 0.001,
					lods = [
						["models/belt-left-surface-hd.stl", high, noshadow],
						["models/belt-left-surface-ld.stl", medium, noshadow],
						["models/belt-left-surface-vld.stl", verylow, noshadow],
					],
				},
				{
					color = ridgeColor,
					translate = [0,-1.25,0],
					cycler = ridgeTransforms,
					lods = [
						["models/belt-ridge-hd.stl", high, noshadow],
					],
				},
			],
		})
	end()

	function() // conveyorRight
		conveyorTransformsLeft = []
		function()
			entry = west*0.29
			offset = south*0.5 + east*0.5
			isteps = steps/2
			step = -90.0/isteps
			for i in isteps
				r = matrix_invert(matrix_rotate(up, step*(i+1) + 90.0))
				p = point_transform(entry, r) + offset
				d = point_transform(south, r)
				conveyorTransformsLeft[#conveyorTransformsLeft] = matrix_rotation(d) * matrix_translation(p)
			end
			reverse(conveyorTransformsLeft)
		end()

		conveyorTransformsRight = []
		function()
			entry = west*0.71
			offset = south*0.5 + east*0.5
			osteps = steps+(steps/2)
			step = -90.0/osteps
			for i in osteps
				r = matrix_invert(matrix_rotate(up, step*(i+1) + 90.0))
				p = point_transform(entry, r) + offset
				d = point_transform(south, r)
				conveyorTransformsRight[#conveyorTransformsRight] = matrix_rotation(d) * matrix_translation(p)
			end
			reverse(conveyorTransformsRight)
		end()

		ridgeTransforms = []
		function()
			base = north*0.5
			a = matrix_translation(south*0.5 + east*0.5)
			step = -90.0/steps
			for i in steps
				j = steps-1-i
				r = matrix_invert(matrix_rotate(up, step*(j+1)))
				t = matrix_translation(point_transform(base, r * a))
				d = matrix_invert(matrix_rotate(up, -step * i))
				ridgeTransforms[#ridgeTransforms] = d * t
			end
			reverse(ridgeTransforms)
		end()

		add_spec({
			name = names.conveyorRight,
			upgrade = names.conveyorRightUpgrade,
			upgradeCascade = upgradeCascade,
			cycle = names.conveyor,
			followConveyor = names.conveyor,
			statsGroup = names.conveyor,
			upward = names.balancer,
			downward = names.unveyorEntry,
			build = false,
			title = if tier > 1 "Belt (Right, Fast)" else "Belt (Right)" end,
			toolbar = "a-b-$(tier)",
			collision = [0, 0, 0, 1, 2, 1],
			selection = [0, -0.5, 0, 1, 1, 1],
			iconD = 1.0,
			iconV = 0.5,
			rotateGhost = true,
			rotateExtant = true,
			conveyor = true,
			conveyorInput = east*0.5,
			conveyorOutput = south*0.5,
			conveyorSlotsLeft = 1,
			conveyorSlotsRight = 3,
			consumeElectricity = true,
			conveyorEnergyDrain = W(120*tier),
			conveyorTransformsLeft = conveyorTransformsLeft,
			conveyorTransformsRight = conveyorTransformsRight,
			health = 150,
			materials = materials,
			parts = [
				repeatingPillar,
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-1.25,0],
					scale = 0.001,
					lods = [
						["models/belt-right-base-hd.stl", high, shadow],
						["models/belt-right-base-ld.stl", medium, shadow],
					],
				},
				{
					color = surfaceColor,
					translate = [0,-1.25,0],
					scale = 0.001,
					lods = [
						["models/belt-right-surface-hd.stl", high, noshadow],
						["models/belt-right-surface-ld.stl", medium, noshadow],
						["models/belt-right-surface-vld.stl", verylow, noshadow],
					],
				},
				{
					color = ridgeColor,
					translate = [0,-1.25,0],
					cycler = ridgeTransforms,
					lods = [
						["models/belt-ridge-hd.stl", high, noshadow],
					],
				},
			],
		})
	end()

	materials = {
		"steel-sheet" = 1,
		"steel-frame" = 1,
	}

	if tier >= 2
		materials["gear-wheel"] = 1
		materials["plastic-bar"] = 1
	end

	iconD = 1.5
	iconV = 0.2

	function() // unveyor entry
		conveyorTransformsLeft = []
		function()
			base = east*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsLeft[#conveyorTransformsLeft] = matrix_translate(base + step*i)
			end
		end()

		conveyorTransformsRight = []
		function()
			base = west*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsRight[#conveyorTransformsRight] = matrix_translate(base + step*i)
			end
		end()

		ridgeTransforms = []
		function()
			base = origin
			step = north*(1.0/steps)
			for i in steps
				ridgeTransforms[#ridgeTransforms] = matrix_translate(base + step*i)
			end
			reverse(ridgeTransforms)
		end()

		chevronT = matrix_translate(0,0.5,-0.5)

		add_spec({
			name = names.unveyorEntry,
			upgrade = names.unveyorEntryUpgrade,
			upgradeCascade = upgradeCascade,
			cycle = names.unveyorExit,
			upward = names.conveyor,
			follow = names.unveyorExit,
			statsGroup = names.conveyor,
			build = true,
			title = if tier > 1 "Belt (Underground, Fast)" else "Belt (Underground)" end,
			toolbar = "a-c-$(tier)",
			collision = [0, 0, 0, 1, 2, 2],
			selection = [0, -0.25, 0, 1, 1.5, 2],
			iconD = iconD,
			iconV = iconV,
			rotateGhost = true,
			conveyor = true,
			conveyorInput = north,
			conveyorOutput = origin,
			conveyorCentroid = south*0.5,
			conveyorSlotsLeft = 2,
			conveyorSlotsRight = 2,
			consumeElectricity = true,
			conveyorEnergyDrain = W(200*tier),
			conveyorTransformsLeft = conveyorTransformsLeft,
			conveyorTransformsRight = conveyorTransformsRight,
			unveyor = true,
			unveyorEntry = true,
			unveyorRange = 15*tier,
			unveyorPartner = names.unveyorExit,
			health = 150,
			materials = materials,
			parts = [
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-1.25,0],
					scale = 0.001,
					lods = [
						["models/unveyor-base-hd.stl", high, shadow],
						["models/unveyor-base-ld.stl", medium, shadow],
						["models/unveyor-base-vld.stl", verylow, noshadow],
					],
				},
				{
					color = color,
					translate = [0,-1.25,-0.5],
					scale = 0.001,
					lods = [
						["models/belt-base-hd.stl", high, shadow],
						["models/belt-base-ld.stl", medium, noshadow],
					],
				},
				{
					color = surfaceColor,
					translate = [0,-1.25,-0.5],
					scale = 0.001,
					lods = [
						["models/belt-surface-hd.stl", high, noshadow],
						["models/belt-surface-ld.stl", medium, noshadow],
						["models/belt-surface-vld.stl", verylow, noshadow],
					],
				},
				{
					color = ridgeColor,
					translate = [0,-1.25,0],
					cycler = ridgeTransforms,
					lods = [
						["models/belt-ridge-hd.stl", high, noshadow],
					],
				},
				{
					color = chevronColor,
					transform = chevronSR * chevronT,
					lods = [
						["models/pipe-chevron-hd.stl", high, noshadow],
					],
				},
			],
		})
	end()

	function() // unveyor exit
		conveyorTransformsLeft = []
		function()
			base = south + east*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsLeft[#conveyorTransformsLeft] = matrix_translate(base + step*i)
			end
		end()

		conveyorTransformsRight = []
		function()
			base = south + west*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsRight[#conveyorTransformsRight] = matrix_translate(base + step*i)
			end
		end()

		ridgeTransforms = []
		function()
			base = south
			step = north*(1.0/steps)
			for i in steps
				ridgeTransforms[#ridgeTransforms] = matrix_translate(base + step*i)
			end
			reverse(ridgeTransforms)
		end()

		chevronT = matrix_translate(0,0.5,0.35)

		add_spec({
			name = names.unveyorExit,
			upgrade = names.unveyorExitUpgrade,
			upgradeCascade = upgradeCascade,
			cycle = names.unveyorEntry,
			upward = names.conveyor,
			follow = names.conveyor,
			statsGroup = names.conveyor,
			build = false,
			title = if tier > 1 "Belt (Underground, Fast)" else "Belt (Underground)" end,
			toolbar = "a-c-$(tier)",
			collision = [0, 0, 0, 1, 2, 2],
			selection = [0, -0.25, 0, 1, 1.5, 2],
			iconD = iconD,
			iconV = iconV,
			rotateGhost = true,
			conveyor = true,
			conveyorInput = origin,
			conveyorOutput = south,
			conveyorCentroid = north*0.5,
			conveyorSlotsLeft = 2,
			conveyorSlotsRight = 2,
			consumeElectricity = true,
			conveyorEnergyDrain = W(200*tier),
			conveyorTransformsLeft = conveyorTransformsLeft,
			conveyorTransformsRight = conveyorTransformsRight,
			unveyor = true,
			unveyorEntry = false,
			unveyorRange = 15*tier,
			unveyorPartner = names.unveyorEntry,
			health = 150,
			materials = materials,
			parts = [
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-1.25,0],
					scale = 0.001,
					rotate = [up, 180],
					lods = [
						["models/unveyor-base-hd.stl", high, shadow],
						["models/unveyor-base-ld.stl", medium, shadow],
						["models/unveyor-base-vld.stl", verylow, noshadow],
					],
				},
				{
					color = color,
					translate = [0,-1.25,0.5],
					scale = 0.001,
					lods = [
						["models/belt-base-hd.stl", high, shadow],
						["models/belt-base-ld.stl", medium, noshadow],
					],
				},
				{
					color = surfaceColor,
					translate = [0,-1.25,0.5],
					scale = 0.001,
					lods = [
						["models/belt-surface-hd.stl", high, noshadow],
						["models/belt-surface-ld.stl", medium, noshadow],
						["models/belt-surface-vld.stl", verylow, noshadow],
					],
				},
				{
					color = ridgeColor,
					translate = [0,-1.25,0],
					cycler = ridgeTransforms,
					lods = [
						["models/belt-ridge-hd.stl", high, noshadow],
					],
				},
				{
					color = chevronColor,
					transform = chevronSR * chevronT,
					lods = [
						["models/pipe-chevron-hd.stl", high, noshadow],
					],
				},
			],
		})
	end()

	materials = {
		"steel-sheet" = 1*tier,
		"steel-frame" = 1*tier,
		"circuit-board" = 1*tier,
	}

	if tier >= 2
		materials["gear-wheel"] = 1*tier
		materials["plastic-bar"] = 1*tier
	end

	function() // loader
		conveyorTransformsLeft = []
		function()
			base = east*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsLeft[#conveyorTransformsLeft] = matrix_translate(base + step*i)
			end
		end()

		conveyorTransformsRight = []
		function()
			base = west*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsRight[#conveyorTransformsRight] = matrix_translate(base + step*i)
			end
		end()

		ridgeTransforms = []
		function()
			base = origin
			step = north*(1.0/steps)
			for i in steps
				ridgeTransforms[#ridgeTransforms] = matrix_translate(base + step*i)
			end
			reverse(ridgeTransforms)
		end()

		chevronT = matrix_translate(0,0.5,-0.5)

		add_spec({
			name = names.loader,
			upgrade = names.loaderUpgrade,
			upgradeCascade = upgradeCascade,
			cycle = names.unloader,
			cycleReverseDirection = true,
			downward = names.balancer,
			build = true,
			title = if tier > 1 "Loader (Fast)" else "Loader" end,
			toolbar = "a-d-$(tier)",
			collision = [0, 0, 0, 1, 2, 2],
			selection = [0, -0.25, 0, 1, 1.5, 2],
			iconD = iconD,
			iconV = iconV,
			rotateGhost = true,
			conveyor = true,
			conveyorInput = north,
			conveyorOutput = origin,
			conveyorCentroid = south*0.5,
			conveyorSlotsLeft = 2,
			conveyorSlotsRight = 2,
			consumeElectricity = true,
			energyConsume = kW(60*tier),
			conveyorEnergyDrain = kW(1*tier),
			conveyorTransformsLeft = conveyorTransformsLeft,
			conveyorTransformsRight = conveyorTransformsRight,
			loader = true,
			loaderUnload = false,
			loaderPoint = south*1.5,
			networker = true,
			networkInterfaces = 1,
			networkWifi = [0,0.5,0],
			status = true,
			beacon = [0,0.5,0.5],
			enable = true,
			health = 150,
			materials = materials,
			parts = [
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-1,0],
					scale = 0.001,
					lods = [
						["models/loader-base-hd.stl", high, shadow],
						["models/loader-base-ld.stl", medium, shadow],
						["models/loader-base-vld.stl", verylow, noshadow],
					],
				},
				{
					color = color,
					translate = [0,-1.25,-0.5],
					scale = 0.001,
					lods = [
						["models/belt-base-hd.stl", high, shadow],
						["models/belt-base-ld.stl", medium, noshadow],
					],
				},
				{
					color = surfaceColor,
					translate = [0,-1.25,-0.5],
					scale = 0.001,
					lods = [
						["models/belt-surface-hd.stl", high, noshadow],
						["models/belt-surface-ld.stl", medium, noshadow],
						["models/belt-surface-vld.stl", verylow, noshadow],
					],
				},
				{
					color = ridgeColor,
					translate = [0,-1.25,0],
					cycler = ridgeTransforms,
					lods = [
						["models/belt-ridge-hd.stl", high, noshadow],
					],
				},
				{
					color = chevronColor,
					transform = chevronSR * chevronT,
					lods = [
						["models/pipe-chevron-hd.stl", high, noshadow],
					],
				},
			],
		})
	end()

	function() // unloader
		conveyorTransformsLeft = []
		function()
			base = south + east*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsLeft[#conveyorTransformsLeft] = matrix_translate(base + step*i)
			end
		end()

		conveyorTransformsRight = []
		function()
			base = south + west*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsRight[#conveyorTransformsRight] = matrix_translate(base + step*i)
			end
		end()

		ridgeTransforms = []
		function()
			base = south
			step = north*(1.0/steps)
			for i in steps
				ridgeTransforms[#ridgeTransforms] = matrix_translate(base + step*i)
			end
			reverse(ridgeTransforms)
		end()

		chevronT = matrix_translate(0,0.5,0.35)

		add_spec({
			name = names.unloader,
			upgrade = names.unloaderUpgrade,
			upgradeCascade = upgradeCascade,
			cycle = names.loader,
			cycleReverseDirection = true,
			downward = names.balancer,
			build = true,
			title = if tier > 1 "Unloader (Fast)" else "Unloader" end,
			toolbar = "a-d-$(tier)",
			collision = [0, 0, 0, 1, 2, 2],
			selection = [0, -0.25, 0, 1, 1.5, 2],
			iconD = iconD,
			iconV = iconV,
			rotateGhost = true,
			conveyor = true,
			conveyorInput = origin,
			conveyorOutput = south,
			conveyorCentroid = north*0.5,
			conveyorSlotsLeft = 2,
			conveyorSlotsRight = 2,
			consumeElectricity = true,
			energyConsume = kW(60*tier),
			conveyorEnergyDrain = kW(1*tier),
			conveyorTransformsLeft = conveyorTransformsLeft,
			conveyorTransformsRight = conveyorTransformsRight,
			loader = true,
			loaderUnload = true,
			loaderPoint = north*1.5,
			networker = true,
			networkInterfaces = 1,
			networkWifi = [0,0.5,0],
			status = true,
			beacon = [0,0.5,-0.5],
			enable = true,
			health = 150,
			materials = materials,
			parts = [
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-1,0],
					scale = 0.001,
					rotate = [up, 180],
					lods = [
						["models/loader-base-hd.stl", high, shadow],
						["models/loader-base-ld.stl", medium, shadow],
						["models/loader-base-vld.stl", verylow, noshadow],
					],
				},
				{
					color = color,
					translate = [0,-1.25,0.5],
					scale = 0.001,
					lods = [
						["models/belt-base-hd.stl", high, shadow],
						["models/belt-base-ld.stl", medium, noshadow],
					],
				},
				{
					color = surfaceColor,
					translate = [0,-1.25,0.5],
					scale = 0.001,
					lods = [
						["models/belt-surface-hd.stl", high, noshadow],
						["models/belt-surface-ld.stl", medium, noshadow],
						["models/belt-surface-vld.stl", verylow, noshadow],
					],
				},
				{
					color = ridgeColor,
					translate = [0,-1.25,0],
					cycler = ridgeTransforms,
					lods = [
						["models/belt-ridge-hd.stl", high, noshadow],
					],
				},
				{
					color = chevronColor,
					transform = chevronSR * chevronT,
					lods = [
						["models/pipe-chevron-hd.stl", high, noshadow],
					],
				},
			],
		})
	end()

	materials = {
		"steel-sheet" = 1*tier,
		"circuit-board" = 1*tier,
	}

	if tier >= 2
		materials["gear-wheel"] = 1*tier
		materials["plastic-bar"] = 1*tier
	end

	function() // balancer
		conveyorTransformsLeft = []
		function()
			base = south*0.5 + east*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsLeft[#conveyorTransformsLeft] = matrix_translate(base + step*i)
			end
		end()

		conveyorTransformsRight = []
		function()
			base = south*0.5 + west*0.21
			step = north*(1.0/steps)
			for i in steps
				conveyorTransformsRight[#conveyorTransformsRight] = matrix_translate(base + step*i)
			end
		end()

		ridgeTransforms = []
		function()
			base = south*0.5
			step = north*(1.0/steps)
			for i in steps
				ridgeTransforms[#ridgeTransforms] = matrix_translate(base + step*i)
			end
			reverse(ridgeTransforms)
		end()

		chevronT = matrix_translate(0,0.25,-0.075)

		add_spec({
			name = names.balancer,
			upgrade = names.balancerUpgrade,
			upgradeCascade = upgradeCascade,
			statsGroup = names.conveyor,
			upward = names.loader,
			downward = names.conveyor,
			build = true,
			title = if tier > 1 "Balancer (Fast)" else "Balancer" end,
			toolbar = "a-e-$(tier)",
			collision = [0, 0, 0, 1, 2, 1],
			selection = [0, -0.35, 0, 1, 1.3, 1],
			iconD = 1.0,
			iconV = 0.3,
			rotateGhost = true,
			rotateExtant = true,
			balancer = true,
			conveyor = true,
			conveyorInput = north*0.5,
			conveyorOutput = south*0.5,
			conveyorSlotsLeft = 2,
			conveyorSlotsRight = 2,
			consumeElectricity = true,
			conveyorEnergyDrain = kW(5*tier),
			conveyorTransformsLeft = conveyorTransformsLeft,
			conveyorTransformsRight = conveyorTransformsRight,
			health = 150,
			materials = materials,
			parts = [
				fixedPillar,
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-1.25,0],
					scale = 0.001,
					lods = [
						["models/balancer-base-hd.stl", high, shadow],
						["models/balancer-base-ld.stl", medium, shadow],
						["models/balancer-base-vld.stl", verylow, noshadow],
					],
				},
				{
					color = surfaceColor,
					translate = [0,-1.25,0],
					scale = 0.001,
					lods = [
						["models/belt-surface-hd.stl", high, noshadow],
						["models/belt-surface-ld.stl", medium, noshadow],
						["models/belt-surface-vld.stl", verylow, noshadow],
					],
				},
				{
					color = ridgeColor,
					translate = [0,-1.25,0],
					cycler = ridgeTransforms,
					lods = [
						["models/belt-ridge-hd.stl", high, noshadow],
					],
				},
				{
					color = chevronColor,
					transform = chevronSR * chevronT,
					lods = [
						["models/pipe-chevron-hd.stl", high, noshadow],
					],
				},
			],
		})
	end()

	tubeGlass = {
		color = 0xAAAAAAFF,
		gloss = gloss.shiny,
		lods = [
			["models/tube-conduit-glass-hd.stl", high, noshadow],
			["models/tube-conduit-glass-ld.stl", medium, noshadow],
		],
	}

	tubeRing = {
		color = 0x444444FF,
		gloss = gloss.shiny,
		lods = [
			["models/tube-conduit-ring-hd.stl", high, noshadow],
			["models/tube-conduit-ring-ld.stl", medium, noshadow],
		],
	}

	tubeChevron = {
		color = color,
		scale = 0.6,
		translate = up * 0.41,
		lods = [
			["models/chevron-hd.stl", high, noshadow],
			["models/chevron-ld.stl", high, noshadow],
		],
	}

	materials = {
		"steel-frame" = 2*tier,
		"copper-sheet" = 2*tier,
		"brick" = 5*tier,
		"electric-motor" = 1*tier,
	}

	if tier >= 2
		materials["gear-wheel"] = 2*tier
		materials["plastic-bar"] = 2*tier
	end

	function tube(height, fields)
		belt = (height/2.0 + 0.25)*-1

		conveyorTransformsLeft = []
		function()
			base = south*0.5 + east*0.21
			step = north*(1.0/steps)
			drop = down * ((height-2.0)/2.0)
			for i in steps
				p = base + step*i + drop
				conveyorTransformsLeft[#conveyorTransformsLeft] = matrix_translate(p)
			end
		end()

		conveyorTransformsRight = []
		function()
			base = south*0.5 + west*0.21
			step = north*(1.0/steps)
			drop = down * ((height-2.0)/2.0)
			for i in steps
				p = base + step*i + drop
				conveyorTransformsRight[#conveyorTransformsRight] = matrix_translate(p)
			end
		end()

		ridgeTransforms = []
		function()
			base = south*0.5
			step = north*(1.0/steps)
			for i in steps
				ridgeTransforms[#ridgeTransforms] = matrix_translate(base + step*i)
			end
			reverse(ridgeTransforms)
		end()

		add_spec({
			name = fields.name,
			upgrade = fields.upgrade,
			upgradeCascade = upgradeCascade,
			cycle = fields.nameAlt,
			upward = fields.upward,
			downward = fields.downward,
			build = fields.build,
			statsGroup = names.tubeSmall,
			title = if tier > 1 "Tube (Fast)" else "Tube" end,
			toolbar = "a-f-$(tier)",
			collision = [0, 0, 0, 1, height, 1],
			rotateGhost = true,
			rotateExtant = true,
			tube = true,
			tubeOrigin = height/2.0,
			tubeSpeed = lib.ceil(1000.0/(0.5*steps)), // mm/s
			tubeSpan = 30*tier*1000, // mm
			conveyor = true,
			conveyorInput = down * ((height-2.0)/2.0) + north*0.5,
			conveyorOutput = down * ((height-2.0)/2.0) + south*0.5,
			conveyorSlotsLeft = 2,
			conveyorSlotsRight = 2,
			consumeElectricity = true,
			energyConsume = kW(30*tier),
			conveyorTransformsLeft = conveyorTransformsLeft,
			conveyorTransformsRight = conveyorTransformsRight,
			health = 150,
			materials = materials,
			tubeGlass = tubeGlass,
			tubeRing = tubeRing,
			tubeChevron = tubeChevron,
			iconD = height*0.7,
			iconV = -height*0.1,
			parts = [
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-height/2.0,0],
					lods = [
						["models/tube-frame-$(fields.size)-hd.stl", high, shadow],
						["models/tube-frame-$(fields.size)-ld.stl", medium, shadow],
						["models/tube-frame-$(fields.size)-vld.stl", verylow, noshadow],
					],
				},
				{
					color = 0x444444ff,
					gloss = gloss.shiny,
					translate = [0,height/2.0,0],
					lods = [
						["models/tube-cowling-hd.stl", high, shadow],
						["models/tube-cowling-ld.stl", medium, shadow],
					],
				},
				{
					spinner = [up,tier*2],
					color = colors.steel,
					gloss = gloss.shiny,
					translate = [0,height/2.0,0],
					lods = [
						["models/tube-fan-hd.stl", high, noshadow],
						["models/tube-fan-ld.stl", medium, noshadow],
					],
				},
				{
					color = color,
					translate = [0,belt,0],
					scale = 0.001,
					lods = [
						["models/belt-base-hd.stl", high, shadow],
						["models/belt-base-ld.stl", medium, shadow],
					],
				},
				{
					color = surfaceColor,
					translate = [0,belt,0],
					scale = 0.001,
					lods = [
						["models/belt-surface-hd.stl", high, noshadow],
						["models/belt-surface-ld.stl", medium, noshadow],
						["models/belt-surface-vld.stl", verylow, noshadow],
					],
				},
				{
					color = ridgeColor,
					translate = [0,belt,0],
					cycler = ridgeTransforms,
					lods = [
						["models/belt-ridge-hd.stl", high, noshadow],
					],
				},
			],
		})

		add_spec({
			name = fields.nameAlt,
			upgrade = fields.upgradeAlt,
			upgradeCascade = upgradeCascade,
			cycle = fields.name,
			upward = fields.upwardAlt,
			downward = fields.downwardAlt,
			build = false,
			statsGroup = names.tubeSmall,
			title = if tier > 1 "Tube (Fast)" else "Tube" end,
			toolbar = "a-f-$(tier)",
			collision = [0, 0, 0, 1, height, 1],
			rotateGhost = true,
			rotateExtant = true,
			tube = true,
			tubeOrigin = height/2.0,
			tubeSpeed = lib.ceil(1000.0/(0.5*steps)), // mm/s
			tubeSpan = 30*tier*1000, // mm
			consumeElectricity = true,
			energyConsume = kW(30*tier),
			health = 150,
			place = [placement.land, placement.hill],
			placeOnHill = true,
			placeOnHillPlatform = 1,
			materials = materials,
			tubeGlass = tubeGlass,
			tubeRing = tubeRing,
			tubeChevron = tubeChevron,
			parts = [
				{
					color = color,
					filter = filter.powdercoat,
					translate = [0,-height/2.0,0],
					lods = [
						["models/tube-frame-$(fields.size)-alt-hd.stl", high, shadow],
						["models/tube-frame-$(fields.size)-alt-ld.stl", medium, shadow],
						["models/tube-frame-$(fields.size)-alt-vld.stl", verylow, noshadow],
					],
				},
				{
					color = 0x444444ff,
					gloss = gloss.shiny,
					translate = [0,height/2.0,0],
					lods = [
						["models/tube-cowling-hd.stl", high, shadow],
						["models/tube-cowling-ld.stl", medium, shadow],
					],
				},
				{
					spinner = [up,tier*2],
					color = colors.steel,
					gloss = gloss.shiny,
					translate = [0,height/2.0,0],
					lods = [
						["models/tube-fan-hd.stl", high, noshadow],
						["models/tube-fan-ld.stl", medium, noshadow],
					],
				},
			],
		})
	end

	tube(3.0, {
		build = true,
		size = "small",
		name = names.tubeSmall,
		upward = names.tubeMedium,
		nameAlt = names.tubeSmallAlt,
		upwardAlt = names.tubeMediumAlt,
		upgrade = names.tubeSmallUpgrade,
		upgradeAlt = names.tubeSmallAltUpgrade,
	})

	tube(5.0, {
		build = false,
		size = "medium",
		name = names.tubeMedium,
		upward = names.tubeLarge,
		downward = names.tubeSmall,
		nameAlt = names.tubeMediumAlt,
		upwardAlt = names.tubeLargeAlt,
		downwardAlt = names.tubeSmallAlt,
		upgrade = names.tubeMediumUpgrade,
		upgradeAlt = names.tubeMediumAltUpgrade,
	})

	tube(7.0, {
		build = false,
		size = "large",
		name = names.tubeLarge,
		downward = names.tubeMedium,
		nameAlt = names.tubeLargeAlt,
		downwardAlt = names.tubeMediumAlt,
		upgrade = names.tubeLargeUpgrade,
		upgradeAlt = names.tubeLargeAltUpgrade,
	})

end

conveyorTier(1, 2, 24, 0xFFDD00ff, 0xDDBB00ff)
conveyorTier(2, 2, 12, 0x2E8B57ff, 0x0e6b37ff)

function()
	states = []
	for i in 360
		states[#states] = [
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			matrix_rotate(east, 3.0*i),
			matrix_rotate(east, 3.0*i),
		]
	end

	add_spec({
		name = "offshore-pump",
		title = "Offshore Pump",
		rotateGhost = true,
		rotateExtant = true,
		place = [placement.water],
		consumeMagic = true,
		energyConsume = kW(100),
		energyDrain = kW(3),
		collision = [0, -0.5, 0, 3, 4, 3],
		iconD = 2.5,
		iconV = 1,
		source = true,
		sourceFluid = "water",
		sourceFluidRate = L(20),
		enable = true,
		health = 150,
		pipe = true,
		pipeCapacity = L(100),
		pipeHints = true,
		pipeConnections = [ [1.5, -1.5, 0.0] ],
		materials = {
			"circuit-board" = 1,
			"gear-wheel" = 1,
			"pipe" = 1,
		},
		states = states,
		parts = [
			{
				color = 0x4444ccff,
				translate = [0,-2,0],
				lods = [
					["models/offshore-pump-base-hd.stl", high, shadow],
					["models/offshore-pump-base-ld.stl", medium, shadow],
				],
			},
			{
				color = 0xccccccff,
				gloss = gloss.metallic,
				translate = [-0.5,0,-1],
				lods = [
					["models/offshore-pump-thingy-hd.stl", high, shadow],
					["models/offshore-pump-thingy-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0xccccccff,
				gloss = gloss.metallic,
				translate = [0.5,0,-1],
				lods = [
					["models/offshore-pump-thingy-hd.stl", high, shadow],
					["models/offshore-pump-thingy-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0xccccccff,
				gloss = gloss.metallic,
				translate = [0.75,-0.5,0.3],
				rotate = [up,-90],
				lods = [
					["models/offshore-pump-motor-hd.stl", high, shadow],
					["models/offshore-pump-motor-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0xccccccff,
				gloss = gloss.metallic,
				translate = [0,-0.5,1],
				rotate = [up,-90],
				lods = [
					["models/offshore-pump-belt-hd.stl", high, shadow],
					["models/offshore-pump-belt-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0xccccccff,
				gloss = gloss.metallic,
				translate = [0,-2,0],
				lods = [
					["models/offshore-pump-pipe-hd.stl", high, shadow],
					["models/offshore-pump-pipe-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0xccccccff,
				spinner = [east, -3],
				gloss = gloss.metallic,
				translate = [-0.5,0,1],
				rotate = [up,90],
				lods = [
					["models/offshore-pump-wheel-hd.stl", high, shadow],
					["models/offshore-pump-wheel-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0xccccccff,
				spinner = [east, 10],
				gloss = gloss.metallic,
				translate = [0.75,-0.5,0.3],
				rotate = [up,-90],
				lods = [
					["models/offshore-pump-motor-shaft-hd.stl", high, shadow],
					["models/offshore-pump-motor-shaft-ld.stl", medium, noshadow],
				],
			},
		],
	})
end()

function containerSmall(fields)
	spec = {
		health = 150,
		collision = [0, 0, 0, 3, 3, 7],
		rotateGhost = true,
		rotations = [south,east],
		store = true,
		capacity = kg(5000),
		tipStorage = true,
		iconD = 4.0,
		iconV = -0.4,
		parts = [{
			color = fields.color,
			gloss = gloss.metallic,
			filter = filter.powdercoat,
			lods = [
				["models/container-small-hd.stl", high, shadow],
				["models/container-small-ld.stl", medium, shadow],
				["models/container-small-vld.stl", verylow, noshadow],
			],
		}],
	}

	for k,v in fields spec[k] = v end
	spec.color = nil
	spec.autoColor = nil

	if fields.autoColor then
		spec.parts[0].autoColor = true
	end

	add_spec(spec)
end

function containerLarge(fields)
	spec = {
		health = 150,
		collision = [0, 0, 0, 4, 4, 11],
		rotateGhost = true,
		rotations = [south,east],
		store = true,
		capacity = kg(25000),
		tipStorage = true,
		parts = [{
			color = fields.color,
			gloss = gloss.metallic,
			lods = [
				["models/container-large-hd.stl", high, shadow],
				["models/container-large-ld.stl", medium, shadow],
				["models/container-large-vld.stl", verylow, noshadow],
			],
		}],
	}

	for k,v in fields spec[k] = v end
	spec.color = nil

	add_spec(spec)
end

function containerSmallNetworker(fields)
	fields.networker = true
	fields.networkInterfaces = 1
	fields.networkWifi = [0,1.45,0]
	containerSmall(fields)
end

containerSmall({
	name = "magic-container",
	title = "magic-container",
	color = colors.magic,
	build = false,
	storeSetLower = true,
	storeSetUpper = true,
	storeMagic = true,
	logistic = true,
	construction = true,
})

containerSmall({
	name = "magic-generator",
	title = "magic-generator",
	color = 0x0000ffff,
	build = false,
	enable = true,
	consumeMagic = true,
	generateElectricity = true,
	energyGenerate = GW(1),
	store = false,
})

containerSmall({
	name = "container-supply",
	title = "Container (Supply)",
	color = 0x0000aaff,
	build = false,
	clone = false,
	plan = false,
	enable = true,
	tipStorage = true,
	consumeMagic = true,
	generateElectricity = true,
	energyGenerate = MW(1),
	logistic = true,
	storeSetLower = true,
	storeSetUpper = true,
	forceDeleteStore = true,
	powerpole = true,
	powerpoleRoot = true,
	powerpoleRange = 5,
	powerpoleCoverange = 2,
})

containerSmall({
	name = "container-shipping",
	title = "Container (Shipping)",
	color = 0x8d6e54ff,
	build = true,
	plan = false,
	clone = true,
	tipStorage = true,
	storeAnything = true,
	storeAnythingDefault = true,
	forceDeleteStore = true,
	monorailContainer = true,
	autoColor = true,
	materials = {
		"steel-sheet" = 4,
		"steel-frame" = 2,
	},
})

containerSmall({
	name = "container-provider",
	title = "Container (Provider)",
	toolbar = "$(toolbar.storage)-a",
	color = colors.provider,
	logistic = true,
	storeSetUpper = true,
	storeUpgradePreserve = true,
	forceDeleteStore = true,
	cycle = "container-requester",
	wiki = "https://github.com/factropy/community/wiki/Container",
	materials = {
		"steel-sheet" = 4,
		"steel-frame" = 2,
		"circuit-board" = 2,
	},
})

containerSmallNetworker({
	name = "container-requester",
	title = "Container (Requester)",
	toolbar = "$(toolbar.storage)-b",
	color = colors.requester,
	logistic = true,
	storeSetLower = true,
	storeSetUpper = true,
	storeUpgradePreserve = true,
	forceDeleteStore = true,
	cycle = "container-buffer",
	materials = {
		"steel-sheet" = 4,
		"steel-frame" = 2,
		"mother-board" = 1,
	},
})

containerSmallNetworker({
	name = "container-overflow",
	title = "Container (Overflow)",
	toolbar = "$(toolbar.storage)-c",
	color = colors.overflow,
	logistic = true,
	storeSetUpper = true,
	storeUpgradePreserve = true,
	forceDeleteStore = true,
	overflow = true,
	cycle = "container-provider",
	materials = {
		"steel-sheet" = 4,
		"steel-frame" = 2,
		"mother-board" = 1,
	},
})

containerSmallNetworker({
	name = "container-buffer",
	title = "Container (Buffer)",
	toolbar = "$(toolbar.storage)-d",
	color = colors.buffer,
	logistic = true,
	storeSetLower = true,
	storeSetUpper = true,
	storeUpgradePreserve = true,
	forceDeleteStore = true,
	construction = true,
	cycle = "container-overflow",
	materials = {
		"steel-sheet" = 4,
		"steel-frame" = 2,
		"mother-board" = 1,
	},
})

containerLarge({
	name = "container-large",
	title = "Container (Large)",
	toolbar = "$(toolbar.storage)-e",
	color = 0x888888FF,
	logistic = true,
	storeSetUpper = true,
	storeUpgradePreserve = true,
	forceDeleteStore = true,
	materials = {
		"steel-sheet" = 8,
		"steel-frame" = 4,
		"plastic-bar" = 4,
	},
})

function assembler(name, title, toolbar, upgrade, color, energy, materials)
	pipeInput = [3.0,-1.0,1.5]
	pipeOutput = [3.0,-1.0,-1.5]

	states = []
	state0 = identity

	for i in 360
		state1 = matrix_rotate(up,-i*5)

		piston1 = state0
		piston2 = state0
		piston3 = state0

		mod = 0.0 + (i%60)

		if i >= 0 && i < 60
			piston1 = matrix_translate(0,mod*-0.01,0)
		end

		if i >= 60 && i < 120
			piston1 = matrix_translate(0,-0.60+mod*0.01,0)
		end

		if i >= 120 && i < 180
			piston2 = matrix_translate(0,mod*-0.01,0)
		end

		if i >= 180 && i < 240
			piston2 = matrix_translate(0,-0.60+mod*0.01,0)
		end

		if i >= 240 && i < 300
			piston3 = matrix_translate(0,mod*-0.01,0)
		end

		if i >= 300 && i < 360
			piston3 = matrix_translate(0,-0.60+mod*0.01,0)
		end

		states[#states] = [
			state0,
			state1,
			state1,
			state1,
			state1,
			piston1,
			piston2,
			piston3,
			matrix_rotate(up, 1.0 * i),
			matrix_rotate(up, -0.8 * i),
			matrix_rotate(up, 0.6 * i),
			matrix_rotate(up, -0.4 * i),
			matrix_rotate(up, 0.2 * i),
		]
	end

	add_spec({
		name = name,
		title = title,
		toolbar = toolbar,
		upgrade = upgrade,
		health = 150,
		store = true,
		capacity = kg(100),
		priority = 10,
		tipStorage = true,
		rotateGhost = true,
		rotateExtant = true,
		crafter = true,
		crafterRate = 1.0,
		crafterState = true,
		enable = true,
		recipeTags = ["crafting", "crafting-with-fluid"],
		consumeElectricity = true,
		energyConsume = energy,
		energyDrain = 0+(0.03*energy),
		collision = [0, 0, 0, 6, 3, 6],
		iconD = 4,
		iconV = 0.25,
		status = true,
		beacon = [0,1,0],
		enemyTarget = true,
		materials = materials,
		pipeHints = true,
		pipeInputConnections = [
			point_rotate(pipeInput, up, 0.0),
			point_rotate(pipeInput, up, 90.0),
			point_rotate(pipeInput, up, 180.0),
			point_rotate(pipeInput, up, 270.0),
		],
		pipeOutputConnections = [
			point_rotate(pipeOutput, up, 0.0),
			point_rotate(pipeOutput, up, 90.0),
			point_rotate(pipeOutput, up, 180.0),
			point_rotate(pipeOutput, up, 270.0),
		],
		states = states,
		parts = [
			{
				color = color,
				gloss = gloss.metallic,
				filter = filter.powdercoat,
				lods = [
					["models/assembler-chassis-hd.stl", high, shadow],
					["models/assembler-chassis-ld.stl", medium, shadow],
					["models/assembler-chassis-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0x666666FF,
				gloss = gloss.metallic,
				spinner = true,
				rotate = [east, 70.0],
				translate = [0,0.5,2.5],
				lods = [
					["models/fan-hd.stl", high, shadow],
					["models/fan-ld.stl", medium, shadow],
				],
			},
			{
				color = 0x666666FF,
				gloss = gloss.metallic,
				spinner = true,
				rotate = [west, 70.0],
				translate = [0,0.5,-2.5],
				lods = [
					["models/fan-hd.stl", high, shadow],
					["models/fan-ld.stl", medium, shadow],
				],
			},
			{
				color = 0x666666FF,
				gloss = gloss.metallic,
				spinner = true,
				rotate = [north, 70.0],
				translate = [2.5,0.5,0],
				lods = [
					["models/fan-hd.stl", high, shadow],
					["models/fan-ld.stl", medium, shadow],
				],
			},
			{
				color = 0x666666FF,
				gloss = gloss.metallic,
				spinner = true,
				rotate = [south, 70.0],
				translate = [-2.5,0.5,0],
				lods = [
					["models/fan-hd.stl", high, shadow],
					["models/fan-ld.stl", medium, shadow],
				],
			},
			{
				color = 0x666666FF,
				gloss = gloss.metallic,
				lods = [
					["models/assembler-piston-hd.stl", high, shadow],
					["models/assembler-piston-ld.stl", medium, shadow],
				],
			},
			{
				color = 0x666666FF,
				gloss = gloss.metallic,
				translate = [0,0,1.2],
				lods = [
					["models/assembler-piston-hd.stl", high, shadow],
					["models/assembler-piston-ld.stl", medium, shadow],
				],
			},
			{
				color = 0x666666FF,
				gloss = gloss.metallic,
				translate = [0,0,-1.2],
				lods = [
					["models/assembler-piston-hd.stl", high, shadow],
					["models/assembler-piston-ld.stl", medium, shadow],
				],
			},
			{
				color = 0xcaccceFF,
				gloss = gloss.metallic,
				scale = [1.5,1.8,1.5],
				rotate = [east, 90.0],
				translate = [1,1,-1.2],
				lods = [
					["models/gear-hd.stl", high, shadow],
					["models/gear-ld.stl", medium, shadow]
				],
			},
			{
				color = 0xcaccceFF,
				gloss = gloss.metallic,
				scale = [1.1,1.8,1.1],
				rotate = [east, 90.0],
				translate = [1,1,-0.6],
				lods = [
					["models/gear-hd.stl", high, shadow],
					["models/gear-ld.stl", medium, shadow]
				],
			},
			{
				color = 0xcaccceFF,
				gloss = gloss.metallic,
				scale = [1.3,1.8,1.3],
				rotate = [east, 90.0],
				translate = [1,1,0.0],
				lods = [
					["models/gear-hd.stl", high, shadow],
					["models/gear-ld.stl", medium, shadow]
				],
			},
			{
				color = 0xcaccceFF,
				gloss = gloss.metallic,
				scale = [1.2,1.8,1.2],
				rotate = [east, 90.0],
				translate = [1,1,0.6],
				lods = [
					["models/gear-hd.stl", high, shadow],
					["models/gear-ld.stl", medium, shadow]
				],
			},
			{
				color = 0xcaccceFF,
				gloss = gloss.metallic,
				scale = [1.4,1.8,1.4],
				rotate = [east, 90.0],
				translate = [1,1,1.2],
				lods = [
					["models/gear-hd.stl", high, shadow],
					["models/gear-ld.stl", medium, shadow]
				],
			},
		],
	})
end

assembler("assembler", "Assembler", "$(toolbar.crafting)-a", "assembler2", colors.crafter, kW(300), {
	"steel-sheet" = 2,
	"copper-sheet" = 2,
	"pipe" = 2,
	"gear-wheel" = 2,
	"steel-frame" = 5,
	"circuit-board" = 3,
})

assembler("assembler2", "Manufacturer", "$(toolbar.crafting)-aa", nil, 0x008080FF, kW(900), {
	"steel-sheet" = 2,
	"copper-sheet" = 2,
	"pipe" = 2,
	"gear-wheel" = 2,
	"steel-frame" = 5,
	"circuit-board" = 3,
	"aluminium-frame" = 3,
	"battery" = 3,
	"filter" = 3,
	"plastic-bar" = 5,
	"mother-board" = 1,
})

function miner(name, title, toolbar, upgrade, color, energy, materials)

	states = []
	for i in 180
		states[#states] = [identity,matrix_rotate(up, i)]
	end

	add_spec({
		name = name,
		title = title,
		toolbar = toolbar,
		upgrade = upgrade,
		store = true,
		capacity = kg(10),
		rotateGhost = true,
		footings = [
			[placement.hill, [0,-3,0] ],
			[placement.land, [0,-3,7] ],
		],
		crafter = true,
		crafterRate = 1.0,
		crafterState = true,
		crafterOutput = true,
		crafterOutputPos = [0,-2,8],
		networker = true,
		networkInterfaces = 1,
		networkWifi = [0,2.5,5],
		crafterTransmitResources = true,
		enable = true,
		status = true,
		beacon = [0,2.5,5],
		recipeTags = ["mining"],
		consumeElectricity = true,
		energyConsume = energy,
		energyDrain = 0+(0.03*energy),
		collision = [0, 0, 0, 5, 5, 15],
		health = 150,
		iconD = 6.5,
		iconV = 0.7,
		enemyTarget = true,
		wiki = "https://github.com/factropy/community/wiki/Miner",
		materials = materials,
		states = states,
		parts = [
			{
				color = color,
				filter = filter.powdercoat,
				lods = [
					["models/miner-chassis-ld.stl", high, shadow],
					["models/miner-chassis-ld.stl", medium, shadow],
					["models/miner-chassis-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0xccccccff,
				gloss = gloss.metallic,
				scale = [3,7,3],
				rotate = [east,90],
				translate = [0,0,5.75],
				lods = [
					["models/gear-hd.stl", high, shadow],
					["models/gear-ld.stl", medium, noshadow],
				],
			},
		],
	})
end

miner("miner", "Miner", "$(toolbar.mining)-a", nil, 0xCD853Fff, kW(400), {
	"steel-sheet" = 3,
	"steel-frame" = 3,
	"gear-wheel" = 3,
	"circuit-board" = 3,
})

function()

	states = []
	state0 = identity

	for i in 360
		j = if (i < 180) i else 180-(i-180) end

		state1 = matrix_rotate(up, i)
		state2 = matrix_translate(0,0, -0.001*j)

		states[#states] = [
			state0,
			state1,
			state2,
			state2,
			state2,
			state2,
		]
	end

	add_spec({
		name = "crusher",
		title = "Crusher",
		toolbar = "$(toolbar.mining)-b",
		store = true,
		capacity = kg(1000),
		tipStorage = true,
		rotateGhost = true,
		rotateExtant = true,
		priority = 10,
		crafter = true,
		crafterRate = 1.0,
		crafterState = true,
		enable = true,
		recipeTags = ["crushing", "crushing-with-fluid"],
		consumeElectricity = true,
		energyConsume = kW(300),
		energyDrain = kW(9),
		collision = [0, 0, 0, 5, 4, 5],
		status = true,
		beacon = [0,2,0],
		iconD = 4,
		iconV = 0,
		health = 150,
		wiki = "https://github.com/factropy/community/wiki/Crusher",
		enemyTarget = true,
		pipeHints = true,
		pipeInputConnections = [
			point_rotate([2.5, -1.5, 0.0], up, 0.0),
			point_rotate([2.5, -1.5, 0.0], up, 180.0),
		],
		pipeOutputConnections = [
			point_rotate([2.5, -1.5, 0.0], up, 90.0),
			point_rotate([2.5, -1.5, 0.0], up, 270.0),
		],
		materials = {
			"brick" = 5,
			"steel-sheet" = 4,
			"steel-frame" = 4,
			"gear-wheel" = 5,
		},
		states = states,
		parts = [
			{
				color = 0x333333ff,
				filter = filter.powdercoat,
				gloss = gloss.metallic,
				translate = [0,-2,0],
				lods = [
					["models/ore-crusher-frame-hd.stl", high, shadow],
					["models/ore-crusher-frame-ld.stl", medium, shadow],
					["models/ore-crusher-frame-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0x778899ff,
				translate = [0,-2,0],
				lods = [
					["models/ore-crusher-rotor-hd.stl", high, shadow],
					["models/ore-crusher-rotor-ld.stl", medium, noshadow],
					["models/ore-crusher-rotor-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0x778899ff,
				translate = [0,-2,0],
				rotate = [up, 0.0],
				lods = [
					["models/ore-crusher-side-hd.stl", high, noshadow],
					["models/ore-crusher-side-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x778899ff,
				translate = [0,-2,0],
				rotate = [up, 90.0],
				lods = [
					["models/ore-crusher-side-hd.stl", high, noshadow],
					["models/ore-crusher-side-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x778899ff,
				translate = [0,-2,0],
				rotate = [up, 180.0],
				lods = [
					["models/ore-crusher-side-hd.stl", high, noshadow],
					["models/ore-crusher-side-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x778899ff,
				translate = [0,-2,0],
				rotate = [up, 270.0],
				lods = [
					["models/ore-crusher-side-hd.stl", high, noshadow],
					["models/ore-crusher-side-ld.stl", medium, noshadow],
				],
			},
		],
	})
end()

function furnace(name, title, toolbar, energy, materials)

	states = [
		[identity, identity, identity, identity, identity, identity, identity],
	]

	states_show = [
		[true, true, false, true, false, false, false],
	]

	fire = matrix_translate(0,0,-0.5)

	// turn on, fade in smoke
	for i in 10
		states[#states] = [
			identity,
			identity,
			fire,
			identity,
			identity,
			matrix_scale(0.1*(i+1)),
			identity,
		]
		states_show[#states_show] = [
			true, false, true, false, true, i > 0, i > 0
		]
	end

	// normal running, full smoke
	for i in 80
		states[#states] = [
			identity,
			identity,
			fire,
			identity,
			identity,
			identity,
			identity,
		]
		states_show[#states_show] = [
			true, false, true, false, true, true, true,
		]
	end

	// turn off, fade out smoke
	for i in 10
		states[#states] = [
			identity,
			identity,
			fire,
			identity,
			identity,
			matrix_scale(0.1*(9-i)),
			identity,
		]
		states_show[#states_show] = [
			true, false, true, false, true, true, true,
		]
	end

	add_spec({
		name = name,
		title = title,
		toolbar = toolbar,
		health = 150,
		store = true,
		capacity = kg(100),
		priority = 10,
		tipStorage = true,
		rotateGhost = true,
		rotateExtant = true,
		crafter = true,
		crafterRate = 1.0,
		crafterProgress = true,
		recipeTags = ["smelting"],
		consumeFuel = true,
		burnerState = true,
		consumeFuelType = "chemical",
		energyConsume = energy,
		collision = [0, 0, 0, 4, 4, 4],
		iconD = 3.5,
		iconV = 0.25,
		enemyTarget = true,
		wiki = "https://github.com/factropy/community/wiki/Furnace",
		materials = materials,
		states = states,
		statesShow = states_show,
		parts = [
			{
				color = 0xDAA520FF,
				filter = filter.powdercoat,
				lods = [
					["models/furnace-hd.stl", high, shadow],
					["models/furnace-ld.stl", medium, shadow],
					["models/furnace-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0x000000FF,
				glow = true,
				lods = [
					["models/furnace-fire-hd.stl", high, noshadow],
					["models/furnace-fire-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0xf73718FF,
				glow = true,
				translate = south*0.01,
				lods = [
					["models/furnace-fire-hd.stl", high, noshadow],
					["models/furnace-fire-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x000000FF,
				lods = [
					["models/furnace-smoke-hd.stl", high, noshadow],
					["models/furnace-smoke-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0xf73718FF,
				translate = up*0.01
				lods = [
					["models/furnace-smoke-hd.stl", high, noshadow],
					["models/furnace-smoke-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x111111ff,
				smoke = {
					direction = up,
					particlesMax = 2400,
					particlesPerTick = 20,
					particleRadius = 0.02,
					emitRadius = 0.5,
					spreadFactor = 0.01,
					tickRadiusFactor = 0.005,
					tickDirectionFactor = 0.1,
					tickDecayFactor = 0.99,
					tickLifeLower = 60,
					tickLifeUpper = 180,
				},
				translate = up*2.0,
			},
			{
				flame = true,
				translate = south*1.2 + down*0.5,
				scale = [2,1.2,2],
			}
		],
	})
end

furnace("furnace", "Furnace", "$(toolbar.mining)-c", kW(100), {
	"copper-sheet" = 5,
	"brick" = 10,
})

function boiler()

	parts = [
		{
			color = 0xB0C4DEff,
			filter = filter.powdercoat,
			rotate = [up, -90],
			lods = [
				["models/boiler-chassis-hd.stl", high, shadow],
				["models/boiler-chassis-ld.stl", medium, shadow],
				["models/boiler-chassis-vld.stl", verylow, noshadow],
			],
		},
		{
			color = 0x666666ff,
			gloss = gloss.metallic,
			rotate = [up, -90],
			lods = [
				["models/boiler-firebox-hd.stl", high, shadow],
				["models/boiler-firebox-ld.stl", medium, shadow],
				["models/boiler-firebox-vld.stl", verylow, noshadow],
			],
		},
		{
			color = 0xda8a67ff,
			gloss = 2,
			rotate = [up, -90],
			lods = [
				["models/boiler-stack-hd.stl", high, shadow],
				["models/boiler-stack-ld.stl", medium, noshadow],
			],
		},
		{
			color = 0x000000ff,
			rotate = [up, -90],
			lods = [
				["models/boiler-stack-cover-hd.stl", high, shadow],
				["models/boiler-stack-cover-ld.stl", medium, noshadow],
			],
		},
		{
			color = 0xf73718FF,
			glow = true,
			rotate = [up, -90],
			translate = up*0.01,
			lods = [
				["models/boiler-stack-cover-hd.stl", high, shadow],
				["models/boiler-stack-cover-ld.stl", medium, noshadow],
			],
		},
		{
			color = colors.pipe,
			translate = [0,-0.5,1],
			scale = [2,1,1],
			lods = [
				["models/pipe-straight-hd.stl", high, shadow],
			],
		},
		{
			color = colors.pipe,
			rotate = [up,90],
			translate = [0.5,-0.5,-1],
			lods = [
				["models/pipe-straight-hd.stl", high, shadow],
			],
		},
		{
			color = colors.pipe,
			rotate = [up,90],
			translate = [-0.5,-0.5,-1],
			lods = [
				["models/pipe-straight-hd.stl", high, shadow],
			],
		},
		{
			color = 0x111111ff,
			smoke = {
				direction = up,
				particlesMax = 1200,
				particlesPerTick = 10,
				particleRadius = 0.015,
				emitRadius = 0.25,
				spreadFactor = 0.01,
				tickRadiusFactor = 0.005,
				tickDirectionFactor = 0.05,
				tickDecayFactor = 0.99,
				tickLifeLower = 60,
				tickLifeUpper = 180,
			},
			translate = [0,1,0.6],
		},
		{
			flame = true,
			translate = [0,1,0.6],
			scale = [1,0.75,1],
		}
	]

	for i in 5
		i = i-2
		rotA = matrix_rotate(east,90)
		traA = matrix_translate(up*0.5)
		rotB = matrix_rotate(south, i*30)
		traB = matrix_translate(south * 1.31)
		trx = rotA * traA * rotB * traB
		parts[#parts] = {
			color = 0xB0C4DEff,
			transform = trx,
			lods = [ ["models/boiler-rivet-hd.stl", high, noshadow] ],
		}
	end

	for i in 5
		i = i-2
		rotA = matrix_rotate(east,-90)
		traA = matrix_translate(up*0.5)
		rotB = matrix_rotate(south, i*30)
		traB = matrix_translate(south * -1.31)
		trx = rotA * traA * rotB * traB
		parts[#parts] = {
			color = 0xB0C4DEff,
			transform = trx,
			lods = [ ["models/boiler-rivet-hd.stl", high, noshadow] ],
		}
	end

	states = []
	statesShow = []

	normalState = [
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
		identity,
	]

	normalShow = [
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
	]

	for i in 10
		states[#states] = [
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			matrix_scale(0.1*i),
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
		]
		statesShow[#statesShow] = [
			true,
			true,
			true,
			true,
			i > 0,
			true,
			true,
			true,
			true,
			i > 0,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
		]
	end

	for i in 80
		states[#states] = normalState
		statesShow[#statesShow] = normalShow
	end

	for i in 10
		states[#states] = [
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			matrix_scale(0.1*(9-i)),
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
		]
		statesShow[#statesShow] = [
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
			true,
		]
	end

	add_spec({
		name = "boiler",
		title = "Boiler",
		enemyTarget = true,
		collision = [0, 0, 0, 2, 2, 3],
		pipe = true,
		pipeCapacity = L(1000),
		health = 150,
		align = true,
		rotateGhost = true,
		consumeFuel = true,
		burnerState = true,
		consumeFuelType = "chemical",
		energyConsume = MW(2),
		energyDrain = kW(60),
		crafter = true,
		crafterRate = 1.0,
		crafterProgress = true,
		recipeTags = ["boiling"],
		crafterRecipe = "boiling",
		materials = {
			"brick" = 5,
			"copper-sheet" = 3,
		},
		pipeHints = true,
		pipeConnections = [
			[1.0, -0.5, 1.0],
			[-1.0, -0.5, 1.0],
		],
		pipeOutputConnections = [
			[0.5, -0.5, -1.5],
			[-0.5, -0.5, -1.5],
		],
		parts = parts,
		states = states,
		statesShow = statesShow,
	})

end

boiler()

function batteryPack(name, title, upgrade, speed, materials)

	function battery(tra)
		return {
			color = 0xcc6600ff,
			translate = tra,
			lods = [
				["models/battery-body-hd.stl", high, shadow],
				["models/battery-body-ld.stl", medium, noshadow],
			],
		},
		{
			color = 0x888888ff,
			translate = tra,
			lods = [
				["models/battery-cap-hd.stl", high, noshadow],
				["models/battery-cap-ld.stl", medium, noshadow],
			],
		},
		{
			color = 0x660000ff,
			translate = [tra[0],tra[1],tra[2]-0.1],
			lods = [
				["models/battery-terminal-hd.stl", high, noshadow],
			],
		},
		{
			color = 0x004400ff,
			translate = [tra[0],tra[1],tra[2]+0.1],
			lods = [
				["models/battery-terminal-hd.stl", high, noshadow],
			],
		}
	end

	add_spec({
		name = name,
		title = title,
		toolbar = toolbar,
		upgrade = upgrade,
		health = 150,
		rotateGhost = true,
		rotateExtant = true,
		effector = true,
		effectorElectricity = speed,
		effectorCharge = speed,
		effectorEnergyDrain = kW(10),
		consumeElectricity = true,
		collision = [0, 0, 0, 1, 2, 1],
		iconD = 1.5,
		iconV = 0,
		materials = materials,
		parts = [
			{
				color = colors.steel,
				lods = [
					["models/battery-rack-hd.stl", high, shadow],
					["models/battery-rack-ld.stl", medium, shadow],
				],
			},
			{
				color = colors.chevron,
				translate = [0,1,0],
				lods = [
					["models/chevron-hd.stl", high, noshadow],
					["models/chevron-ld.stl", medium, noshadow],
				],
			},
			battery([ 0.25, 0.05, 0.0]),
			battery([-0.25, 0.05, 0.0]),
			battery([ 0.25,-0.95, 0.0]),
			battery([-0.25,-0.95, 0.0]),
		],
	})
end

batteryPack("battery-pack", "Battery Pack", nil, 0.2, {
	"mother-board" = 1,
	"steel-frame" = 1,
	"copper-wire" = 2,
	"plastic-bar" = 3,
	"battery" = 5,
})

function airFilter(name, title, upgrade, speed, materials)

	function filter(tra)
		return {
			color = colors.plastic,
			translate = tra,
			lods = [
				["models/air-filter-frame-hd.stl", high, shadow],
				["models/air-filter-frame-ld.stl", medium, noshadow],
			],
		},
		{
			color = colors.steel,
			translate = tra,
			lods = [
				["models/air-filter-mesh-hd.stl", high, noshadow],
			],
		},
		{
			color = 0xffffffff,
			translate = tra,
			lods = [
				["models/air-filter-hd.stl", high, noshadow],
				["models/air-filter-ld.stl", medium, noshadow],
			],
		}
	end

	add_spec({
		name = name,
		title = title,
		toolbar = toolbar,
		upgrade = upgrade,
		health = 150,
		rotateGhost = true,
		rotateExtant = true,
		effector = true,
		effectorFuel = speed,
		collision = [0, 0, 0, 1, 2, 1],
		iconD = 1.5,
		iconV = 0,
		materials = materials,
		parts = [
			{
				color = colors.steel,
				lods = [
					["models/battery-rack-hd.stl", high, shadow],
					["models/battery-rack-ld.stl", medium, shadow],
				],
			},
			{
				color = colors.chevron,
				translate = [0,1,0],
				lods = [
					["models/chevron-hd.stl", high, noshadow],
					["models/chevron-ld.stl", medium, noshadow],
				],
			},
			filter([ 0.0, 0.05, 0.0]),
			filter([ 0.0,-0.95, 0.0]),
		],
	})
end

airFilter("air-filter", "Air Filter", nil, 0.2, {
	"mother-board" = 1,
	"steel-frame" = 1,
	"copper-wire" = 2,
	"plastic-bar" = 3,
	"filter" = 5,
})

function()

	states = []
	for i in 180
		deg = 0.25*i
		rot = matrix_rotate(south, deg)
		states[#states] = [identity,rot,rot]
	end

	add_spec({
		name = "flywheel",
		title = "Flywheel",
		enemyTarget = true,
		rotateGhost = true,
		health = 150,
		collision = [0, 0, 0, 4, 6, 12],
		iconD = 6,
		iconV = 1,
		consumeCharge = true,
		consumeChargeBuffer = MJ(100),
		consumeChargeRate = MW(1),
		bufferElectricity = true,
		bufferElectricityState = true,
		bufferDischargeRate = MW(1),
		materials = {
			"steel-frame" = 50,
			"electric-motor" = 50,
			"gear-wheel" = 50,
			"copper-wire" = 50,
		},
		states = states,
		parts = [
			{
				color = colors.industrialGreen,
				gloss = 2,
				rotate = [up,-90],
				translate = [0,-3.0+0.5,0],
				lods = [
					["models/flywheel-base-hd.stl", high, shadow],
					["models/flywheel-base-ld.stl", medium, shadow],
					["models/flywheel-base-ld.stl", verylow, noshadow],
				],
			},
			{
				color = 0xB0C4DEff,
				gloss = 2,
				rotate = [up,-90],
				translate = [0,-3.0+1.0,0],
				lods = [
					["models/flywheel-rim-hd.stl", high, shadow],
					["models/flywheel-rim-ld.stl", medium, shadow],
					["models/flywheel-rim-ld.stl", verylow, noshadow],
				],
			},
			{
				color = 0xda8a67ff,
				gloss = 2,
				rotate = [up,-90],
				translate = [0,-3.0+1.0,0],
				lods = [
					["models/flywheel-axel-hd.stl", high, shadow],
					["models/flywheel-axel-ld.stl", medium, noshadow],
				],
			},
		],
	})
end()

function electrolyser(name, title, toolbar, upgrade, color, energy, materials)
	pipeInput = [3.0,-1.0,1.5]
	pipeOutput = [3.0,-1.0,-1.5]

	parts = [
		{
			color = color,
			filter = filter.powdercoat,
			gloss = gloss.metallic,
			lods = [
				["models/electrolysis-plant-base-hd.stl", high, shadow],
				["models/electrolysis-plant-base-ld.stl", medium, shadow],
				["models/electrolysis-plant-base-vld.stl", verylow, noshadow],
			],
		},
		{
			color = colors.pipe,
			gloss = gloss.metallic,
			translate = [-1,0,0],
			lods = [
				["models/electrolysis-plant-pipe-hd.stl", high, shadow],
				["models/electrolysis-plant-pipe-ld.stl", medium, noshadow],
			],
		},
		{
			color = colors.pipe,
			gloss = gloss.metallic,
			translate = [1,0,0],
			lods = [
				["models/electrolysis-plant-pipe-hd.stl", high, shadow],
				["models/electrolysis-plant-pipe-ld.stl", medium, noshadow],
			],
		},
	]

	for i in 5
		parts[#parts] = {
			color = colors.steel,
			gloss = gloss.metallic,
			translate = [0,0,i-2],
			lods = [
				["models/electrolysis-plant-frame-hd.stl", high, shadow],
				["models/electrolysis-plant-frame-ld.stl", medium, noshadow],
			],
		}
	end

	for i in 5
		parts[#parts] = {
			color = 0x9999ffff,
			translucent = true,
			translate = [0,0,i-2],
			lods = [
				["models/electrolysis-plant-glass-hd.stl", medium, noshadow],
			],
		}
	end

	for i in 5
		for j in 5
			parts[#parts] = {
				color = 0xffffffff,
				smoke = {
					direction = up,
					particlesMax = 60,
					particlesPerTick = 1,
					particleRadius = 0.02,
					emitRadius = 0.1,
					spreadFactor = 0.0,
					tickRadiusFactor = 0.005,
					tickDirectionFactor = 0.04,
					tickDecayFactor = 0.99,
					tickLifeLower = 60,
					tickLifeUpper = 60,
				},
				translate = [0.8*(i-2),-0.5,j-2],
			}
		end
	end

	function multiple(v,n)
		batch = []
		for i in n batch[#batch] = v end
		return batch
	end

	states = [
		[
			multiple(identity, 3)...,
			multiple(identity, 5)...,
			multiple(identity, 5)...,
			multiple(identity, 25)...,
		],
	]

	states_show = [
		[
			multiple(true, 3)...,
			multiple(true, 5)...,
			multiple(true, 5)...,
			multiple(false, 25)...,
		],
	]

	// turn on, grow bubbles
	for i in 10
		states[#states] = [
			multiple(identity, 3)...,
			multiple(identity, 5)...,
			multiple(identity, 5)...,
			multiple(matrix_scale(0.1*(i+1)), 25)...,
		]
		states_show[#states_show] = [
			multiple(true, 3)...,
			multiple(true, 5)...,
			multiple(true, 5)...,
			multiple(true, 25)...,
		]
	end

	// normal running, full bubbles
	for i in 80
		states[#states] = [
			multiple(identity, 3)...,
			multiple(identity, 5)...,
			multiple(identity, 5)...,
			multiple(identity, 25)...,
		]
		states_show[#states_show] = [
			multiple(true, 3)...,
			multiple(true, 5)...,
			multiple(true, 5)...,
			multiple(true, 25)...,
		]
	end

	// turn off, shrink bubbles
	for i in 10
		states[#states] = [
			multiple(identity, 3)...,
			multiple(identity, 5)...,
			multiple(identity, 5)...,
			multiple(matrix_scale(0.1*(9-i)), 25)...,
		]
		states_show[#states_show] = [
			multiple(true, 3)...,
			multiple(true, 5)...,
			multiple(true, 5)...,
			multiple(true, 25)...,
		]
	end

	add_spec({
		name = name,
		title = title,
		toolbar = toolbar,
		upgrade = upgrade,
		health = 150,
		store = true,
		capacity = kg(100),
		priority = 10,
		tipStorage = true,
		rotateGhost = true,
		rotateExtant = true,
		crafter = true,
		crafterRate = 1.0,
		crafterProgress = true,
		enable = true,
		recipeTags = ["electrolysis"],
		consumeElectricity = true,
		energyConsume = energy,
		energyDrain = 0+(0.03*energy),
		collision = [0, 0, 0, 6, 3, 6],
		iconD = 4,
		iconV = 0.25,
		status = true,
		beacon = [0,1.2,0],
		enemyTarget = true,
		materials = materials,
		pipeHints = true,
		pipeInputConnections = [
			point_rotate(pipeInput, up, 0.0),
			point_rotate(pipeInput, up, 90.0),
			point_rotate(pipeInput, up, 180.0),
			point_rotate(pipeInput, up, 270.0),
		],
		pipeOutputConnections = [
			point_rotate(pipeOutput, up, 0.0),
			point_rotate(pipeOutput, up, 90.0),
			point_rotate(pipeOutput, up, 180.0),
			point_rotate(pipeOutput, up, 270.0),
		],
		states = states,
		statesShow = states_show,
		parts = parts,
	})
end

electrolyser("electrolyser1", "Electrolyser", "$(toolbar.crafting)-b", nil, colors.crafter2, MW(1), {
	"steel-sheet" = 4,
	"copper-sheet" = 4,
	"pipe" = 4,
	"plastic-bar" = 4,
	"steel-frame" = 4,
	"mother-board" = 1,
})

function chemplant(name, title, toolbar, upgrade, color, energy, materials)
	pipeInput = [3.0,-1.5,1.5]
	pipeOutput = [3.0,-1.5,-1.5]

	parts = [
		{
			color = color,
			filter = filter.powdercoat,
			gloss = gloss.metallic,
			translate = [0,-0.5,0],
			lods = [
				["models/chemical-plant-base-hd.stl", high, shadow],
				["models/chemical-plant-base-ld.stl", medium, shadow],
				["models/chemical-plant-base-vld.stl", verylow, noshadow],
			],
		},
		{
			color = 0xffffffff,
			gloss = gloss.metallic,
			translate = [-1,-0.5,-1],
			lods = [
				["models/chemical-plant-storage-tank-hd.stl", high, shadow],
				["models/chemical-plant-storage-tank-ld.stl", medium, shadow],
				["models/chemical-plant-storage-tank-vld.stl", verylow, noshadow],
			],
		},
		{
			color = 0xffffffff,
			gloss = gloss.metallic,
			translate = [-1,-0.5,1],
			lods = [
				["models/chemical-plant-storage-tank-hd.stl", high, shadow],
				["models/chemical-plant-storage-tank-ld.stl", medium, shadow],
				["models/chemical-plant-storage-tank-vld.stl", verylow, noshadow],
			],
		},
		{
			color = colors.pipe,
			gloss = gloss.metallic,
			translate = [-1,-0.5,-1],
			lods = [
				["models/chemical-plant-pipe-hd.stl", high, shadow],
				["models/chemical-plant-pipe-ld.stl", medium, noshadow],
			],
		},
		{
			color = colors.pipe,
			gloss = gloss.metallic,
			translate = [-1,-0.5,1],
			lods = [
				["models/chemical-plant-pipe-hd.stl", high, shadow],
				["models/chemical-plant-pipe-ld.stl", medium, noshadow],
			],
		},
		{
			color = colors.steel,
			gloss = gloss.shiny,
			translate = [1.15,-0.45,0],
			lods = [
				["models/chemical-plant-mixing-tank-hd.stl", high, shadow],
				["models/chemical-plant-mixing-tank-ld.stl", medium, shadow],
				["models/chemical-plant-mixing-tank-vld.stl", verylow, noshadow],
			],
		},
		{
			color = colors.steel,
			spinner = true,
			gloss = gloss.metallic,
			translate = [1.15,-0.45,1],
			lods = [
				["models/chemical-plant-agitator-hd.stl", medium, noshadow],
			],
		},
		{
			color = colors.steel,
			spinner = true,
			gloss = gloss.metallic,
			translate = [1.15,-0.45,-1],
			lods = [
				["models/chemical-plant-agitator-hd.stl", medium, noshadow],
			],
		},
		{
			color = "recipe",
			translucent = true,
			translate = [1.15,-1.55,0],
			lods = [
				["models/chemical-plant-mixing-tank-fluid-hd.stl", medium, noshadow],
			],
		},
	]

	for z in [-1,1]
		parts[#parts] = {
			color = 0xffffffff,
			smoke = {
				direction = up,
				particlesMax = 180,
				particlesPerTick = 2,
				particleRadius = 0.02,
				emitRadius = 0.8,
				spreadFactor = 0.0,
				tickRadiusFactor = 0.005,
				tickDirectionFactor = 0.03,
				tickDecayFactor = 0.99,
				tickLifeLower = 60,
				tickLifeUpper = 60,
			},
			translate = [1.15,-1.8,z],
		}
	end

	function multiple(v,n)
		batch = []
		for i in n batch[#batch] = v end
		return batch
	end

	states = [
		[
			multiple(identity, 9)...,
			multiple(identity, 2)...,
		],
	]

	states_show = [
		[
			multiple(true, 9)...,
			multiple(false, 2)...,
		],
	]

	speed = -3.6

	// turn on, fill tank
	for i in 40
		states[#states] = [
			multiple(identity, 6)...,
			multiple(matrix_rotate(up, speed*i), 2)...,
			multiple(matrix_translate([0,0.025*i,0]), 3)...,
		]
		states_show[#states_show] = [
			multiple(true, 9)...,
			multiple(true, 2)...,
		]
	end

	// normal running, full tank with bubbles
	for i in 120
		states[#states] = [
			multiple(identity, 6)...,
			multiple(matrix_rotate(up, (i+40)*speed), 2)...,
			multiple(matrix_translate([0,0.025*40,0]), 3)...,
		]
		states_show[#states_show] = [
			multiple(true, 9)...,
			multiple(true, 2)...,
		]
	end

	// turn off, empty tank
	for i in 40
		states[#states] = [
			multiple(identity, 6)...,
			multiple(matrix_rotate(up, (i+160)*speed), 2)...,
			multiple(matrix_translate([0,0.025*(40-i),0]), 3)...,
		]
		states_show[#states_show] = [
			multiple(true, 9)...,
			multiple(true, 2)...,
		]
	end

	add_spec({
		name = name,
		title = title,
		toolbar = toolbar,
		upgrade = upgrade,
		health = 150,
		store = true,
		capacity = kg(100),
		priority = 10,
		tipStorage = true,
		rotateGhost = true,
		rotateExtant = true,
		crafter = true,
		crafterRate = 1.0,
		crafterProgress = true,
		enable = true,
		recipeTags = tags.chemistry,
		consumeElectricity = true,
		energyConsume = energy,
		energyDrain = 0+(0.03*energy),
		collision = [0, 0, 0, 6, 4, 6],
		iconD = 4,
		iconV = 0.25,
		status = true,
		beacon = [-1,1.75,0.5],
		enemyTarget = true,
		materials = materials,
		pipeHints = true,
		pipeInputConnections = [
			point_rotate(pipeInput, up, 0.0),
			point_rotate(pipeInput, up, 90.0),
			point_rotate(pipeInput, up, 180.0),
			point_rotate(pipeInput, up, 270.0),
		],
		pipeOutputConnections = [
			point_rotate(pipeOutput, up, 0.0),
			point_rotate(pipeOutput, up, 90.0),
			point_rotate(pipeOutput, up, 180.0),
			point_rotate(pipeOutput, up, 270.0),
		],
		states = states,
		statesShow = states_show,
		parts = parts,
	})
end

chemplant("chemplant1", "Chemical Plant", "$(toolbar.crafting)-c", nil, colors.crafter2, kW(200), {
	"steel-sheet" = 4,
	"copper-sheet" = 4,
	"pipe" = 4,
	"steel-frame" = 4,
	"circuit-board" = 4,
})

function turret(name, title, toolbar, color)

	states = []
	states_show = []

	// 0-59 barrel spin, no burst fire
	// 60-119 barrel spin, burst fire

	for i in 60
		states[#states] = [
			identity,
			identity,
			identity,
			matrix_rotate(east,-6.0*i),
			identity,
		]

		states_show[#states_show] = [
			true,
			true,
			true,
			true,
			false,
		]
	end

	for i in 60
		states[#states] = [
			identity,
			identity,
			identity,
			matrix_rotate(east,-6.0*i),
			identity,
		]

		states_show[#states_show] = [
			true,
			true,
			true,
			true,
			true,
		]
	end

	pivot = [0,1.5,-0.6]
	pivot_fire = [0,1.8,-0.6]

	add_spec({
		name = name,
		title = title,
		health = 500,
		collision = [0, 0, 0, 4, 5, 4],
		iconD = 3,
		iconV = 0.5,
		align = true,
		rotateGhost = true,
		rotations = [south],
		turret = true,
		turretRange = 120,
		turretPivotSpeed = 0.05,
		turretCooldown = 10,
		turretDamage = 1.0,
		turretPivotPoint = pivot,
		turretPivotFirePoint = pivot_fire,
		turretTrail = color,
		turretStateAlternate = true,
		store = true,
		priority = 10,
		capacity = kg(10),
		storeSetUpper = true,
		enemyTarget = true,
		materials = {
			"gear-wheel" = 10,
			"copper-sheet" = 10,
			"steel-frame" = 3,
			"steel-sheet" = 5,
		},
		states = states,
		statesShow = states_show,
		parts = [
			{
				color = 0x444444ff,
				scale = 2.0,
				translate = [0,-2.5,0],
				lods = [
					["models/turret-base-hd.stl", high, shadow],
					["models/turret-base-ld.stl", medium, shadow],
					["models/turret-base-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0x888888ff,
				gloss = gloss.metallic,
				scale = 2.0,
				rotate = [up,-90],
				translate = [0,-2.5,0],
				pivots = ["azimuth"],
				lods = [
					["models/turret-mount-hd.stl", high, shadow],
					["models/turret-mount-ld.stl", medium, shadow],
					["models/turret-mount-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0x888888ff,
				scale = 2.0,
				rotate = [up,-90],
				pivots = ["azimuth", "altitude", pivot],
				lods = [
					["models/turret-butt-hd.stl", high, shadow],
					["models/turret-butt-ld.stl", medium, shadow],
					["models/turret-butt-vld.stl", verylow, noshadow],
				],
			},
			{
				color = colors.steel,
				gloss = gloss.metallic,
				scale = 2.0,
				rotate = [up,-90],
				translate = [0,0,1.6],
				pivots = ["azimuth", "altitude", pivot],
				lods = [
					["models/turret-barrel-hd.stl", high, shadow],
					["models/turret-barrel-ld.stl", medium, shadow],
					["models/turret-barrel-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0xffff00ff,
				translucent = true,
				scale = [2,4,4],
				rotate = [up,-90],
				translate = [0,0.24,2.8],
				pivots = ["azimuth", "altitude", pivot],
				lods = [
					["models/turret-burst-hd.stl", high, noshadow],
					["models/turret-burst-ld.stl", medium, noshadow],
				],
			},
		]
	})
end

turret("turret", "Turret (Gun)", "$(toolbar.defence)-a", 0xffff00ff)

function laserTurret(name, title, toolbar, color)

	pivot = [0,1.5,-0.6]
	pivot_fire = pivot

	function ring(color, offset, on)
		return {
			color = color,
			glow = on,
			gloss = gloss.metallic,
			scale = 2.0,
			rotate = [up,-90],
			translate = [0,0,1.6+offset],
			pivots = ["azimuth", "altitude", pivot],
			lods = [
				["models/turret-laser-ring-hd.stl", high, shadow],
				["models/turret-laser-ring-ld.stl", medium, noshadow],
			],
		}
	end

	function multiple(v,n)
		batch = []
		for i in n batch[#batch] = v end
		return batch
	end

	color_alt = 0x035096ff
	spacing = 0.18

	rings = [
		ring(color_alt, 0.6, false),
		ring(color, 0.6, true),
		ring(color_alt, 0.6-(spacing*1), false),
		ring(color, 0.6-(spacing*1), true),
		ring(color_alt, 0.6-(spacing*2), false),
		ring(color, 0.6-(spacing*2), true),
		ring(color_alt, 0.6-(spacing*3), false),
		ring(color, 0.6-(spacing*3), true),
		ring(color_alt, 0.6-(spacing*4), false),
		ring(color, 0.6-(spacing*4), true),
		ring(color_alt, 0.6-(spacing*5), false),
		ring(color, 0.6-(spacing*5), true),
		ring(color_alt, 0.6-(spacing*6), false),
		ring(color, 0.6-(spacing*6), true),
	]

	states = [ [
		identity,
		identity,
		identity,
		identity,
		multiple(identity,#rings)...,
	] ]

	states_show = [ [
		true,
		true,
		true,
		true,

		true,
		false,
		true,
		false,
		true,
		false,
		true,
		false,
		true,
		false,
		true,
		false,
		true,
		false,
	] ]

	for i in 60
		state = [
			identity,
			identity,
			identity,
			identity,
			multiple(identity,#rings)...,
		]

		states[#states] = state
		states[#states] = state

		state_show = [
			true,
			true,
			true,
			true,

			(i+0) % (#rings/2) != 0,
			(i+0) % (#rings/2) == 0,
			(i+1) % (#rings/2) != 0,
			(i+1) % (#rings/2) == 0,
			(i+2) % (#rings/2) != 0,
			(i+2) % (#rings/2) == 0,
			(i+3) % (#rings/2) != 0,
			(i+3) % (#rings/2) == 0,
			(i+4) % (#rings/2) != 0,
			(i+4) % (#rings/2) == 0,
			(i+5) % (#rings/2) != 0,
			(i+5) % (#rings/2) == 0,
			(i+6) % (#rings/2) != 0,
			(i+6) % (#rings/2) == 0,
		]

		states_show[#states_show] = state_show
		states_show[#states_show] = state_show
	end

	add_spec({
		name = name,
		title = title,
		health = 500,
		collision = [0, 0, 0, 4, 5, 4],
		iconD = 3,
		iconV = 0.5,
		align = true,
		rotateGhost = true,
		rotations = [south],
		turret = true,
		turretRange = 120,
		turretPivotSpeed = 0.05,
		turretCooldown = 1,
		turretDamage = 1.0,
		turretPivotPoint = pivot,
		turretPivotFirePoint = pivot_fire,
		turretTrail = color,
		turretLaser = true,
		turretStateRevert = true,
		enemyTarget = true,
		place = ["land", "hill"],
		placeOnHill = true,
		placeOnHillPlatform = 2.0,
		consumeCharge = true,
		consumeChargeEffect = true,
		consumeChargeBuffer = MJ(50),
		consumeChargeRate = MW(1),
		energyConsume = MW(50),
		materials = {
			"gear-wheel" = 10,
			"copper-sheet" = 10,
			"steel-frame" = 3,
			"steel-sheet" = 5,
			"battery" = 5,
		},
		states = states,
		statesShow = states_show,
		parts = [
			{
				color = 0x444444ff,
				scale = 2.0,
				translate = [0,-2.5,0],
				lods = [
					["models/turret-base-hd.stl", high, shadow],
					["models/turret-base-ld.stl", medium, shadow],
					["models/turret-base-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0x888888ff,
				gloss = gloss.metallic,
				scale = 2.0,
				rotate = [up,-90],
				translate = [0,-2.5,0],
				pivots = ["azimuth"],
				lods = [
					["models/turret-mount-hd.stl", high, shadow],
					["models/turret-mount-ld.stl", medium, shadow],
					["models/turret-mount-vld.stl", verylow, noshadow],
				],
			},
			{
				color = color_alt,
				scale = 2.0,
				rotate = [up,-90],
				pivots = ["azimuth", "altitude", pivot],
				lods = [
					["models/turret-butt-hd.stl", high, shadow],
					["models/turret-butt-ld.stl", medium, shadow],
					["models/turret-butt-vld.stl", verylow, noshadow],
				],
			},
			{
				color = colors.steel,
				gloss = gloss.metallic,
				scale = 2.0,
				rotate = [up,-90],
				translate = [0,0,1.6],
				pivots = ["azimuth", "altitude", pivot],
				lods = [
					["models/turret-laser-hd.stl", high, shadow],
					["models/turret-laser-ld.stl", medium, shadow],
					["models/turret-laser-vld.stl", verylow, noshadow],
				],
			},
			rings...,
		]
	})
end

laserTurret("turret-laser", "Turret (Laser)", "$(toolbar.defence)-b", 0xff0000ff)

add_spec({
	name = "flight-pad-depot",
	title = "Flight Pad (Depot)",
	cycle = "flight-pad-load",
	rotateGhost = true,
	health = 150,
	collision = [0,0,0,10,3,10],
	iconD = 6,
	iconV = 0,
	enemyTarget = true,
	flightPad = true,
	flightPadHome = [0,1.5,0],
	flightPadDepot = true,
	materials = {
		"steel-frame" = 10,
		"aluminium-frame" = 10,
		"mother-board" = 5,
		"brick" = 50,
	},
	parts = [
		{
			color = 0x666666ff,
			translate = [0,-1.5,0],
			lods = [
				["models/flight-pad-base-hd.stl", high, shadow],
				["models/flight-pad-base-ld.stl", medium, shadow],
				["models/flight-pad-base-ld.stl", verylow, noshadow],
			],
		},
		{
			color = colors.overflow,
			translate = [0,-1.5,0],
			lods = [
				["models/flight-pad-hd.stl", high, noshadow],
				["models/flight-pad-ld.stl", verylow, noshadow],
			],
		},
	],
})

add_spec({
	name = "flight-pad-load",
	title = "Flight Pad (Load)",
	cycle = "flight-pad-unload",
	rotateGhost = true,
	health = 150,
	collision = [0,0,0,10,3,10],
	iconD = 6,
	iconV = 0,
	enemyTarget = true,
	flightPad = true,
	flightPadHome = [0,1.5,0],
	flightPadSend = true,
	store = true,
	tipStorage = true,
	storeSetUpper = true,
	storeAnything = true,
	capacity = kg(5000),
	materials = {
		"steel-frame" = 10,
		"aluminium-frame" = 10,
		"mother-board" = 5,
		"brick" = 50,
	},
	parts = [
		{
			color = 0x666666ff,
			translate = [0,-1.5,0],
			lods = [
				["models/flight-pad-base-hd.stl", high, shadow],
				["models/flight-pad-base-ld.stl", medium, shadow],
				["models/flight-pad-base-ld.stl", verylow, noshadow],
			],
		},
		{
			color = colors.provider,
			translate = [0,-1.5,0],
			lods = [
				["models/flight-pad-hd.stl", high, noshadow],
				["models/flight-pad-ld.stl", verylow, noshadow],
			],
		},
	],
})

add_spec({
	name = "flight-pad-unload",
	title = "Flight Pad (Unload)",
	cycle = "flight-pad-depot",
	rotateGhost = true,
	health = 150,
	collision = [0,0,0,10,3,10],
	iconD = 6,
	iconV = 0,
	enemyTarget = true,
	flightPad = true,
	flightPadHome = [0,1.5,0],
	flightPadRecv = true,
	store = true,
	tipStorage = true,
	storeSetUpper = true,
	capacity = kg(5000),
	materials = {
		"steel-frame" = 10,
		"aluminium-frame" = 10,
		"mother-board" = 5,
		"brick" = 50,
	},
	parts = [
		{
			color = 0x666666ff,
			translate = [0,-1.5,0],
			lods = [
				["models/flight-pad-base-hd.stl", high, shadow],
				["models/flight-pad-base-ld.stl", medium, shadow],
				["models/flight-pad-base-ld.stl", verylow, noshadow],
			],
		},
		{
			color = colors.requester,
			translate = [0,-1.5,0],
			lods = [
				["models/flight-pad-hd.stl", high, noshadow],
				["models/flight-pad-ld.stl", verylow, noshadow],
			],
		},
	],
})

function()

	states = []

	for i in 90
		states[#states] = [
			identity,
			matrix_rotate(up, 4.0*i),
			matrix_rotate(east, 4.0*i),
			matrix_rotate(south, 4.0*i),
		]
	end

	add_spec({
		name = "teleporter-send",
		title = "Teleporter (Send)",
		rotateGhost = true,
		rotateExtant = true,
		health = 150,
		collision = [0,0,0,8,8,8],
		enemyTarget = true,
		teleporter = true,
		teleporterSend = true,
		teleporterEnergyCycle = GJ(1),
		consumeElectricity = true,
		energyConsume = MW(100),
		store = true,
		storeSetUpper = true,
		storeAnything = true,
		tipStorage = true,
		capacity = kg(5000),
		states = states,
		parts = [
			{
				color = colors.provider,
				translate = [0,-2.5,0],
				lods = [
					["models/teleporter-base-hd.stl", medium, shadow],
				],
			},
			{
				color = colors.gold,
				gloss = gloss.shiny,
				lods = [
					["models/teleporter-ring1-hd.stl", medium, shadow],
				],
			},
			{
				color = colors.bronze,
				gloss = gloss.shiny,
				lods = [
					["models/teleporter-ring2-hd.stl", medium, shadow],
				],
			},
			{
				color = colors.steel,
				gloss = gloss.shiny,
				lods = [
					["models/teleporter-ring3-hd.stl", medium, shadow],
				],
			},
		],
	})

	add_spec({
		name = "teleporter-recv",
		title = "Teleporter (Receive)",
		rotateGhost = true,
		rotateExtant = true,
		health = 150,
		collision = [0,0,0,8,8,8],
		enemyTarget = true,
		teleporter = true,
		teleporterTab = "Teleporter",
		teleporterRecv = true,
		teleporterEnergyCycle = GJ(1),
		consumeElectricity = true,
		energyConsume = MW(100),
		store = true,
		storeSetUpper = true,
		tipStorage = true,
		capacity = kg(5000),
		states = states,
		parts = [
			{
				color = colors.requester,
				translate = [0,-2.5,0],
				lods = [
					["models/teleporter-base-hd.stl", medium, shadow],
				],
			},
			{
				color = colors.gold,
				gloss = gloss.shiny,
				lods = [
					["models/teleporter-ring1-hd.stl", medium, shadow],
				],
			},
			{
				color = colors.bronze,
				gloss = gloss.shiny,
				lods = [
					["models/teleporter-ring2-hd.stl", medium, shadow],
				],
			},
			{
				color = colors.steel,
				gloss = gloss.shiny,
				lods = [
					["models/teleporter-ring3-hd.stl", medium, shadow],
				],
			},
		],
	})

end()

add_spec({
	name = "missile-explosion1",
	title = "missile-explosion1",
	align = false,
	build = false,
	select = false,
	explosion = true,
	explosionDamage = 100,
	explosionRadius = 10,
	explosionRate = 0.5,
})

add_spec({
	name = "missile",
	title = "Missile",
	build = false,
	missile = true,
	missileSpeed = 0.4,
	explodes = true,
	explosionSpec = "missile-explosion1",
	align = false,
	enemy = true,
	select = false,
	health = 50,
	collision = [0, 0, 0, 1, 1, 2],
	parts = [
		{
			color = 0x660000ff,
			lods = [
				["models/missile-chassis.stl", medium, noshadow],
			],
		},
		{
			color = 0xff9900ff,
			translucent = true,
			lods = [
				["models/missile-plume.stl", medium, noshadow],
			],
		},
	],
})

add_spec({
	name = "wifi-tower",
	title = "Wifi Tower",
	health = 150,
	collision = [0, 0, 0, 2, 6, 2],
	rotateGhost = true,
	parts = [{
		color = 0x778899FF,
		filter = filter.powdercoat,
		gloss = gloss.metallic,
		translate = [0,-3,0],
		lods = [ ["models/network-repeater-hd.stl", medium, shadow] ],
	}],
	networker = true,
	networkInterfaces = 3,
	networkHub = true,
	networkRange = 100.0,
	networkWifi = [0,2.5,0],
	materials = {
		"brick" = 5,
		"copper-sheet" = 5,
		"mother-board" = 1,
	},
})

function()
	height = 12.0
	add_spec({
		name = "monorail",
		title = "Monorail Tower",
		cycle = "monorail-stop",
		upward = "monorail-tall",
		toolbar = "a-f",
		collision = [0, 0, 0, 3, height, 3],
		iconD = height*0.6,
		iconV = -1.0,
		rotateGhost = true,
		monorail = true,
		monorailSpan = 50*1000, // mm
		monorailArrive = north*5.0 + up*(height/2.0),
		monorailDepart = south*5.0 + up*(height/2.0),
		monorailAngle = 2.0, // degrees
		place = [placement.land, placement.hill],
		placeOnHill = true,
		placeOnHillPlatform = 2,
		health = 150,
		materials = {
			"brick" = 5,
			"steel-sheet" = 5,
		},
		parts = [
			{
				color = colors.steelDark,
				gloss = gloss.metallic,
				filter = filter.powdercoat,
				translate = [0,-height/2.0,0],
				lods = [
					["models/monorail-tower-hd.stl", high, shadow],
					["models/monorail-tower-ld.stl", medium, shadow],
					["models/monorail-tower-vld.stl", verylow, noshadow],
				],
			},
		],
	})
end()

function()
	height = 18.0
	add_spec({
		name = "monorail-tall",
		title = "Monorail Tower",
		downward = "monorail",
		build = false,
		toolbar = "a-f",
		collision = [0, 0, 0, 3, height, 3],
		iconD = height*0.6,
		iconV = -1.0,
		rotateGhost = true,
		monorail = true,
		monorailSpan = 50*1000, // mm
		monorailArrive = north*5.0 + up*(height/2.0),
		monorailDepart = south*5.0 + up*(height/2.0),
		monorailAngle = 2.0, // degrees
		place = [placement.land, placement.hill],
		placeOnHill = true,
		placeOnHillPlatform = 2,
		health = 150,
		materials = {
			"brick" = 5,
			"steel-sheet" = 5,
		},
		parts = [
			{
				color = colors.steelDark,
				gloss = gloss.metallic,
				filter = filter.powdercoat,
				translate = [0,-height/2.0,0],
				lods = [
					["models/monorail-tower-tall-hd.stl", high, shadow],
					["models/monorail-tower-tall-ld.stl", medium, shadow],
					["models/monorail-tower-tall-vld.stl", verylow, noshadow],
				],
			},
		],
	})
end()

function()
	height = 12.0
	add_spec({
		name = "monorail-stop",
		title = "Monorail Stop",
		toolbar = "a-f",
		collision = [0, 0, 0, 3, height, 11],
		iconD = height*0.75,
		iconV = 0,
		rotateGhost = true,
		monorail = true,
		monorailSpan = 50*1000, // mm
		monorailArrive = north*5.0 + up*(height/2.0),
		monorailDepart = south*5.0 + up*(height/2.0),
		monorailAngle = 2.0, // degrees
		monorailStop = true,
		monorailStopUnload = up*(height/2.0) + up*1.5 + west*3.0 + up*0.5,
		monorailStopEmpty = down*(height/2.0) + up*1.5 + west*3.0,
		monorailStopFill = down*(height/2.0) + up*1.5 + east*3.0,
		monorailStopLoad = up*(height/2.0) + up*1.5 + east*3.0 + up*0.5,
		enemyTarget = true,
		consumeElectricity = true,
		energyConsume = kW(300),
		cycle = "monorail",
		networker = true,
		networkInterfaces = 1,
		networkWifi = up*(height/2.0) + down*0.25 + south*4.25 + east*4.0,
		health = 150,
		materials = {
			"brick" = 10,
			"steel-frame" = 8,
			"gear-wheel" = 8,
			"electric-motor" = 8,
			"mother-board" = 1,
		},
		parts = [
			{
				color = colors.steelDark,
				gloss = gloss.metallic,
				filter = filter.powdercoat,
				translate = [0,-height/2.0,0],
				lods = [
					["models/monorail-stop-hd.stl", high, shadow],
					["models/monorail-stop-ld.stl", medium, shadow],
					["models/monorail-stop-vld.stl", verylow, noshadow],
				]
			}
		]
	})
end()

function()
	add_spec({
		name = "monocar",
		title = "Monorail Car",
		toolbar = "a-f",
		collision = [0, 0, 0, 3, 3, 10],
		iconD = 5,
		iconV = 0,
		rotateGhost = true,
		showItem = true,
		showItemPos = [0,0.5,-4.3],
		health = 150,
		place = [placement.monorail],
		plan = false,
		clone = true,
		monocar = true,
		monocarContainer = up*0.5,
		monocarBogieA = 4.0,
		monocarBogieB = -4.0,
		monocarSpeed = 0.5,
		consumeCharge = true,
		consumeChargeBuffer = MJ(1),
		consumeChargeRate = kW(250),
		energyConsume = kW(250),
		align = false,
		materials = {
			"aluminium-frame" = 5,
			"plastic-bar" = 5,
			"battery" = 2,
			"mother-board" = 1,
		},
		parts = [
			{
				color = 0xffffffff,
				rotate = [up,-90],
				lods = [
					["models/monocar-chassis-hd.stl", high, shadow],
					["models/monocar-chassis-ld.stl", medium, shadow],
					["models/monocar-chassis-ld.stl", verylow, noshadow],
				],
			},
			{
				color = 0xffffffff,
				autoColor = true,
				gloss = gloss.shiny,
				rotate = [up,-90],
				lods = [
					["models/monocar-stripe-hd.stl", high, shadow],
					["models/monocar-stripe-ld.stl", medium, noshadow],
				],
			},
		],
		monocarRoute = {
			color = 0xffffffff,
			rotate = [up,-90],
			lods = [
				["models/monocar-cab-hd.stl", high, shadow],
				["models/monocar-cab-ld.stl", medium, noshadow],
			],
		},
	})
end()

// fluid tanks
function()
	add_spec({
		name = "fluid-tank",
		title = "Fluid Tank",
		pipe = true,
		rotateGhost = true,
		collision = [0, 0, 0, 5, 3, 5],
		iconD = 3,
		iconV = 0,
		pipeHints = true,
		pipeCapacity = L(50000),
		pipeConnections = [
			north*2.5 + down,
			south*2.5 + down,
			east*2.5 + down,
			west*2.5 + down,
		],
		pipeLevels = [
			[ [0,0,0,0.4,1.9,0.2], matrix_translate(0,-0.25,2.48) * matrix_rotate(up,45)],
			[ [0,0,0,0.4,1.9,0.2], matrix_translate(0,-0.25,2.48) * matrix_rotate(up,135)],
			[ [0,0,0,0.4,1.9,0.2], matrix_translate(0,-0.25,2.48) * matrix_rotate(up,225)],
			[ [0,0,0,0.4,1.9,0.2], matrix_translate(0,-0.25,2.48) * matrix_rotate(up,315)],
		],
		health = 150,
		networker = true,
		networkInterfaces = 1,
		networkWifi = up * 1.5,
		materials = {
			"copper-sheet" = 5,
		},
		parts = [
			{
				color = colors.pipe,
				translate = down*1.5,
				lods = [
					["models/fluid-tank-small-hd.stl", high, shadow],
					["models/fluid-tank-small-ld.stl", medium, shadow],
					["models/fluid-tank-small-vld.stl", verylow, noshadow],
				],
			}
			{
				color = colors.pipe,
				translate = down,
				scale = [5,1,1],
				lods = [
					["models/pipe-straight-hd.stl", high, shadow],
					["models/pipe-straight-ld.stl", medium, shadow],
				],
			}
			{
				color = colors.pipe,
				translate = down,
				scale = [5,1,1],
				rotate = [up,90],
				lods = [
					["models/pipe-straight-hd.stl", high, shadow],
					["models/pipe-straight-ld.stl", medium, shadow],
				],
			}
			{
				color = 0xffffffff,
				transform = matrix_rotate(up, -90) * matrix_translate(0,-1.5,2.5) * matrix_rotate(up,45),
				lods = [
					["models/fluid-tank-meter-hd.stl", high, shadow],
					["models/fluid-tank-meter-ld.stl", medium, shadow],
				],
			}
			{
				color = 0xffffffff,
				transform = matrix_rotate(up, -90) * matrix_translate(0,-1.5,2.5) * matrix_rotate(up,135),
				lods = [
					["models/fluid-tank-meter-hd.stl", high, shadow],
					["models/fluid-tank-meter-ld.stl", medium, shadow],
				],
			}
			{
				color = 0xffffffff,
				transform = matrix_rotate(up, -90) * matrix_translate(0,-1.5,2.5) * matrix_rotate(up,225),
				lods = [
					["models/fluid-tank-meter-hd.stl", high, shadow],
					["models/fluid-tank-meter-ld.stl", medium, shadow],
				],
			}
			{
				color = 0xffffffff,
				transform = matrix_rotate(up, -90) * matrix_translate(0,-1.5,2.5) * matrix_rotate(up,315),
				lods = [
					["models/fluid-tank-meter-hd.stl", high, shadow],
					["models/fluid-tank-meter-ld.stl", medium, shadow],
				],
			}
		],
	})

	add_spec({
		name = "fluid-tank-large",
		title = "Fluid Tank (Large)",
		pipe = true,
		rotateGhost = true,
		collision = [0, 0, 0, 8, 3, 8],
		pipeHints = true,
		pipeConnections = [
			north*4.0 + down,
			south*4.0 + down,
			east*4.0 + down,
			west*4.0 + down,
		],
		pipeCapacity = L(150000),
		health = 150,
		networker = true,
		networkInterfaces = 1,
		networkWifi = up * 1.5,
		materials = {
			"copper-sheet" = 10,
			"plastic-bar" = 10,
		},
		parts = [{
			color = colors.pipe,
			translate = down*1.5,
			lods = [
				["models/fluid-tank-large-hd.stl", high, shadow],
				["models/fluid-tank-large-ld.stl", medium, shadow],
				["models/fluid-tank-large-vld.stl", verylow, noshadow],
			],
		}],
	})
end()

// pipes
function()
	add_spec({
		name = "pipe-straight",
		title = "Pipe",
		cycle = "pipe-elbow",
		downward = "pipe-underground",
		pipe = true,
		pipeCapacity = L(100),
		collision = [0, 0, 0, 1, 1, 1],
		rotateGhost = true,
		rotateExtant = true,
		rotations = [south,west],
		pipeConnections = [north*0.5,south*0.5],
		health = 150,
		materials = {
			"pipe" = 1,
		},
		parts = [{
			color = colors.pipe,
			rotate = [up,-90.0],
			lods = [
				["models/pipe-straight-hd.stl", high, shadow],
				["models/pipe-straight-ld.stl", medium, shadow],
				["models/pipe-straight-vld.stl", verylow, noshadow],
			],
		}],
	})

	add_spec({
		name = "pipe-cross",
		title = "Pipe (Cross)",
		cycle = "pipe-straight",
		pipe = true,
		pipeCapacity = L(100),
		collision = [0, 0, 0, 1, 1, 1],
		rotateGhost = true,
		rotateExtant = true,
		rotations = [south],
		pipeConnections = [north*0.5,south*0.5,east*0.5,west*0.5],
		health = 150,
		materials = {
			"pipe" = 1,
		},
		parts = [{
			color = colors.pipe,
			lods = [
				["models/pipe-cross-hd.stl", high, shadow],
				["models/pipe-cross-ld.stl", medium, shadow],
				["models/pipe-cross-vld.stl", verylow, noshadow],
			],
		}],
	})

	add_spec({
		name = "pipe-tee",
		title = "Pipe (Tee)",
		cycle = "pipe-cross",
		pipe = true,
		pipeCapacity = L(100),
		collision = [0, 0, 0, 1, 1, 1],
		rotateGhost = true,
		rotateExtant = true,
		pipeConnections = [south*0.5,east*0.5,west*0.5],
		health = 150,
		materials = {
			"pipe" = 1,
		},
		parts = [{
			color = colors.pipe,
			rotate = [up,-90.0],
			lods = [
				["models/pipe-tee-hd.stl", high, shadow],
				["models/pipe-tee-ld.stl", medium, shadow],
				["models/pipe-tee-vld.stl", verylow, noshadow],
			],
		}],
	})

	add_spec({
		name = "pipe-elbow",
		title = "Pipe (Corner)",
		cycle = "pipe-tee",
		pipe = true,
		pipeCapacity = L(100),
		collision = [0, 0, 0, 1, 1, 1],
		rotateGhost = true,
		rotateExtant = true,
		pipeConnections = [south*0.5,east*0.5],
		health = 150,
		materials = {
			"pipe" = 1,
		},
		parts = [{
			color = colors.pipe,
			rotate = [up,-90.0],
			lods = [
				["models/pipe-elbow-hd.stl", high, shadow],
				["models/pipe-elbow-ld.stl", medium, shadow],
				["models/pipe-elbow-vld.stl", verylow, noshadow],
			],
		}],
	})

	add_spec({
		name = "pipe-underground",
		title = "Pipe (Underground)",
		upward = "pipe-straight",
		downward = "pipe-underwater",
		pipe = true,
		pipeCapacity = L(500),
		pipeUnderground = true,
		pipeUndergroundRange = 10.0,
		collision = [0, 0, 0, 1, 1, 1],
		rotateGhost = true,
		rotateExtant = true,
		pipeConnections = [north*0.5],
		health = 150,
		materials = {
			"pipe" = 5,
		},
		parts = [{
			color = colors.pipe,
			rotate = [up,-90.0],
			lods = [
				["models/pipe-ground-hd.stl", high, shadow],
				["models/pipe-ground-ld.stl", medium, shadow],
				["models/pipe-ground-vld.stl", verylow, noshadow],
			],
		}],
	})

	add_spec({
		name = "pipe-underwater",
		title = "Pipe (Underwater)",
		upward = "pipe-underground",
		pipe = true,
		pipeCapacity = L(1000),
		pipeUnderwater = true,
		pipeUnderwaterRange = 100.0,
		place = [placement.water],
		collision = [0, 0, 0, 1, 1, 1],
		rotateGhost = true,
		rotateExtant = true,
		pipeConnections = [north*0.5],
		health = 150,
		materials = {
			"pipe" = 10,
		},
		parts = [
			{
				color = 0xFF4500ff,
				rotate = [up,-90.0],
				lods = [
					["models/pipe-ground-hd.stl", high, shadow],
					["models/pipe-ground-ld.stl", medium, shadow],
					["models/pipe-ground-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0xFF4500ff,
				transform = matrix_scale(15,1,1) * matrix_rotate(south, -90.0) * matrix_translate(0,-8,0),
				lods = [
					["models/pipe-straight-hd.stl", high, shadow],
					["models/pipe-straight-ld.stl", medium, shadow],
					["models/pipe-straight-vld.stl", verylow, noshadow],
				],
			},
		],
	})

	add_spec({
		name = "pipe-valve",
		title = "Pipe (Valve)",
		pipe = true,
		pipeValve = true,
		pipeCapacity = L(100),
		collision = [0, 0, 0, 1, 1, 1],
		rotateGhost = true,
		rotateExtant = true,
		pipeConnections = [north*0.5,south*0.5],
		health = 150,
		materials = {
			"pipe" = 2,
			"circuit-board" = 1,
		},
		parts = [
			{
				color = colors.pipe,
				rotate = [up,-90.0],
				lods = [
					["models/pipe-valve-hd.stl", high, shadow],
					["models/pipe-valve-ld.stl", medium, shadow],
					["models/pipe-straight-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0xB22222ff,
				rotate = [up,-90],
				lods = [
					["models/pipe-chevron-hd.stl", high, shadow],
				],
			}
		],
	})
end()

function()
	add_spec({
		name = "hill-explosion",
		title = "hill-explosion",
		align = false,
		build = false,
		explosion = true,
		explosionDamage = 0,
		explosionRadius = 5,
		explosionRate = 0.5,
	})

	add_spec({
		name = "hill-explosive",
		title = "Hill Explosive",
		collision = [0, 0, 0, 0.99, 0.99, 0.99],
		iconD = 0.5,
		iconV = 0.0,
		explodes = true,
		explosive = true,
		explosionSpec = "hill-explosion",
		place = [placement.land, placement.hill],
		placeOnHill = true,
		placeOnHillPlatform = 1.0,
		materialsMultiplyHill = 0.3,
		materials = {
			"explosive" = 1,
		},
		parts = [
			{
				color = 0x666666ff,
				translate = [0,0.1,0],
				lods = [
					["models/explosive-strap-hd.stl", high, noshadow],
					["models/explosive-strap-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x666666ff,
				translate = [0,-0.1,0],
				lods = [
					["models/explosive-strap-hd.stl", high, noshadow],
					["models/explosive-strap-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x660000ff,
				lods = [
					["models/explosive-stick-hd.stl", high, shadow],
					["models/explosive-stick-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x909090ff,
				lods = [
					["models/explosive-pin-hd.stl", high, noshadow],
					["models/explosive-pin-ld.stl", medium, noshadow],
				],
			},
		]
	})

	add_spec({
		name = "hill-explosion-atomic",
		title = "hill-explosion-atomic",
		align = false,
		build = false,
		explosion = true,
		explosionDamage = 0,
		explosionRadius = 50,
		explosionRate = 3.0,
	})

	add_spec({
		name = "hill-explosive-atomic",
		title = "Hill Explosive (Atomic)",
		collision = [0, 0, 0, 0.99, 0.99, 0.99],
		explodes = true,
		explosive = true,
		explosionSpec = "hill-explosion-atomic",
		place = [placement.land, placement.hill],
		placeOnHill = true,
		placeOnHillPlatform = 1.0,
		materialsMultiplyHill = 0.0,
		materials = {
			"explosive-atomic" = 1,
		},
		parts = [
			{
				color = 0x666666ff,
				translate = [0,0.1,0],
				lods = [
					["models/explosive-strap-hd.stl", high, noshadow],
					["models/explosive-strap-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x666666ff,
				translate = [0,-0.1,0],
				lods = [
					["models/explosive-strap-hd.stl", high, noshadow],
					["models/explosive-strap-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x006600ff,
				lods = [
					["models/explosive-stick-hd.stl", high, shadow],
					["models/explosive-stick-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x909090ff,
				lods = [
					["models/explosive-pin-hd.stl", high, noshadow],
					["models/explosive-pin-ld.stl", medium, noshadow],
				],
			},
		]
	})

end()

add_spec({
	name = "slab",
	title = "Slab",
	collision = [0,0,0,12,0.01,12],
	iconD = 8,
	iconV = 0,
	place = [placement.land],
	materials = {
		"brick" = 25,
	},
	slab = true,
	rotateExtant = false,
	rotateGhost = true,
	rotations = [south],
	parts = [
		{
			color = 0xc5c5c3ff,
			filter = filter.powdercoat,
			customColor = true,
			lods = [
				["models/slab-hd.stl", high, noshadow],
				["models/slab-ld.stl", medium, noshadow],
				["models/slab-vld.stl", verylow, noshadow],
			],
		},
	],
})

add_spec({
	name = "cart-stop",
	title = "Vehicle Stop",
	cycle = "cart-waypoint",
	health = 150,
	collision = [0, 0, 0, 2, 0.05, 2],
	iconD = 1.25,
	iconV = -0.25,
	cartStop = true,
	cartWaypoint = true,
	rotateGhost = true,
	rotations = [south],
	parts = [
		{
			color = 0x444455ff,
			translate = up*0.01,
			lods = [
				["models/cart-stop-hd.stl", high, noshadow],
				["models/cart-stop-ld.stl", low, noshadow],
			],
		},
		{
			color = 0xffffffff,
			translate = up*0.01,
			lods = [
				["models/cart-stop-edge-hd.stl", high, noshadow],
				["models/cart-stop-edge-ld.stl", low, noshadow],
			]
		},
	],
})

add_spec({
	name = "cart-waypoint",
	title = "Vehicle Waypoint",
	cycle = "cart-stop",
	health = 150,
	collision = [0, 0, 0, 2, 0.05, 2],
	iconD = 1.25,
	iconV = -0.25,
	cartWaypoint = true,
	rotateGhost = true,
	rotations = [south],
	parts = [
		{
			color = 0x444455ff,
			translate = up*0.01,
			lods = [
				["models/cart-waypoint-hd.stl", high, noshadow],
				["models/cart-waypoint-ld.stl", low, noshadow],
			],
		},
		{
			color = 0xffffffff,
			translate = up*0.01,
			lods = [
				["models/cart-waypoint-edge-hd.stl", high, noshadow],
				["models/cart-waypoint-edge-ld.stl", low, noshadow],
			]
		},
	],
})

add_spec({
	name = "router",
	title = "Wifi Router",
	health = 150,
	rotateGhost = true,
	rotateExtant = true,
	router = true,
	consumeElectricity = true,
	energyDrain = W(50),
	collision = [0, 0, 0, 1, 1, 1],
	iconD = 1.5,
	iconV = 0,
	enable = true,
	networker = true,
	networkInterfaces = 2,
	networkWifi = up*0.5,
	status = true,
	beacon = up*0.5,
	router = true,
	parts = [
		{
			color = 0x3d4849ff,
			filter = filter.powdercoat,
			gloss = gloss.metallic,
			translate = down*0.5,
			lods = [
				["models/router-chassis-hd.stl", high, shadow],
				["models/router-chassis-ld.stl", medium, shadow],
				["models/router-chassis-vld.stl", verylow, noshadow],
			],
		},
		{
			color = colors.steel,
			gloss = gloss.metallic,
			translate = down*0.5,
			lods = [
				["models/router-inset-hd.stl", medium, noshadow],
			],
		},
	],
	materials = {
		"steel-frame" = 1,
		"copper-wire" = 5,
		"solder" = 2,
		"mother-board" = 1,
		"battery" = 1,
	},
})

function()
	states = []
	statesShow = []

	for i in 10
		fi = 0.0+i
		states[#states] = [
			identity,
			identity,
			identity,
			identity,
			identity,
			matrix_scale(0.1*fi, 0.1*fi, 0.1*fi),
			identity,
		]
		statesShow[#statesShow] = [
			true,
			true,
			true,
			true,
			true,
			i > 0,
			i > 0,
		]
	end

	for i in 80
		states[#states] = [
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
			identity,
		]
		statesShow[#statesShow] = [
			true,
			true,
			true,
			true,
			true,
			true,
			true,
		]
	end

	for i in 10
		fi = 9.0-i
		states[#states] = [
			identity,
			identity,
			identity,
			identity,
			identity,
			matrix_scale(0.1*fi, 0.1*fi, 0.1*fi),
			identity,
		]
		statesShow[#statesShow] = [
			true,
			true,
			true,
			true,
			true,
			true,
			true,
		]
	end

	add_spec({
		name = "oil-refinery",
		title = "Oil Refinery",
		store = true,
		capacity = kg(100),
		priority = 10,
		rotateGhost = true,
		rotateExtant = true,
		crafter = true,
		crafterRate = 1.0,
		crafterProgress = true,
		enable = true,
		status = true,
		beacon = down*1.1 + south*1.6,
		recipeTags = ["refining"],
		consumeElectricity = true,
		energyConsume = kW(600),
		energyDrain = kW(18),
		collision = [0, 0, 0, 6, 8, 6],
		iconD = 5,
		iconV = 0.75,
		health = 150,
		pipeHints = true,
		pipeInputConnections = [
			point_rotate([1.5, -3.5, 3.0], up, -0.0),
			point_rotate([1.5, -3.5, 3.0], up, -90.0),
			point_rotate([1.5, -3.5, 3.0], up, -180.0),
			point_rotate([1.5, -3.5, 3.0], up, -270.0),
		],
		pipeOutputConnections = [
			point_rotate([1.5, -3.5, -3.0], up, -0.0),
			point_rotate([1.5, -3.5, -3.0], up, -90.0),
			point_rotate([1.5, -3.5, -3.0], up, -180.0),
			point_rotate([1.5, -3.5, -3.0], up, -270.0),
		],
		materials = {
			"copper-sheet" = 5,
			"brick" = 5,
			"steel-frame" = 5,
			"circuit-board" = 5,
		},
		states = states,
		statesShow = statesShow,
		parts = [
			{
				color = 0x999999ff,
				gloss = 32,
				translate = up*-4,
				lods = [
					["models/refinery-base-hd.stl", high, shadow],
					["models/refinery-base-ld.stl", medium, shadow],
					["models/refinery-base-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0xB0C4DEff,
				gloss = 16,
				translate = up*-4,
				lods = [
					["models/refinery-stack-hd.stl", high, shadow],
					["models/refinery-stack-ld.stl", medium, shadow],
					["models/refinery-stack-vld.stl", verylow, noshadow],
				],
			},
			{
				color = 0xffffffFF,
				gloss = 8,
				translate = up*-4,
				lods = [
					["models/refinery-tank-hd.stl", high, shadow],
					["models/refinery-tank-ld.stl", medium, shadow],
					["models/refinery-tank-vld.stl", verylow, noshadow],
				],
			},
			{
				spinner = [up,1],
				color = 0x666666ff,
				gloss = 16,
				rotate = [south,90.0],
				translate = [2.5,-2.15,1.5],
				lods = [
					["models/fan-hd.stl", high, shadow],
					["models/fan-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x666666ff,
				gloss = 16,
				rotate = [south,-90.0],
				translate = [-2.5,-2.15,1.5],
				lods = [
					["models/fan-hd.stl", high, shadow],
					["models/fan-ld.stl", medium, noshadow],
				],
			},
			{
				color = 0x111111ff,
				smoke = {
					direction = up,
					particlesMax = 1200,
					particlesPerTick = 10,
					particleRadius = 0.01,
					emitRadius = 0.25,
					spreadFactor = 0.01,
					tickRadiusFactor = 0.005,
					tickDirectionFactor = 0.05,
					tickDecayFactor = 0.99,
					tickLifeLower = 60,
					tickLifeUpper = 180,
				},
				translate = [1.6,4,-1.6],
			},
			{
				flame = true,
				scale = [1.1,1.5,1.1],
				translate = [1.6,4.25,-1.6],
			},
		]
	})
end()

add_spec({
	name = "powerpole-small",
	title = "Power Pole (Small)",
	health = 150,
	rotations = [south],
	rotateGhost = true,
	rotateExtant = true,
	status = true,
	beacon = [0,3,0],
	powerpole = true,
	powerpoleRange = 16,
	powerpoleCoverage = 8,
	collision = [0, 0, 0, 1, 6, 1],
	place = [placement.land, placement.hill],
	placeOnHill = true,
	placeOnHillPlatform = 1,
	iconD = 2.5,
	iconV = 0,
	parts = [
		{
			color = colors.wood,
			gloss = gloss.metallic,
			translate = down*3.0,
			lods = [
				["models/powerpole-small-body-hd.stl", high, shadow],
				["models/powerpole-small-body-ld.stl", medium, shadow],
				["models/powerpole-small-body-vld.stl", verylow, noshadow],
			],
		},
		{
			color = colors.industrialGreen,
			gloss = gloss.metallic,
			translate = down*3.0,
			lods = [
				["models/powerpole-small-base-hd.stl", high, shadow],
				["models/powerpole-small-base-ld.stl", medium, shadow],
			],
		},
		{
			color = colors.industrialGreen,
			gloss = gloss.metallic,
			translate = down*3.0,
			lods = [
				["models/powerpole-small-head-hd.stl", high, shadow],
				["models/powerpole-small-head-ld.stl", medium, shadow],
			],
		},
	],
	materials = {
		"steel-frame" = 1,
		"copper-wire" = 3,
	},
})

add_spec({
	name = "powerpole-large",
	title = "Power Pole (Large)",
	health = 150,
	rotations = [south],
	rotateGhost = true,
	rotateExtant = true,
	status = true,
	beacon = [0,6,0],
	powerpole = true,
	powerpoleRange = 128,
	powerpoleCoverage = 4,
	collision = [0, 0, 0, 3, 12, 3],
	place = [placement.land, placement.hill],
	placeOnHill = true,
	placeOnHillPlatform = 3,
	iconD = 8,
	iconV = 0,
	parts = [
		{
			color = colors.steel,
			gloss = gloss.metallic,
			translate = down*6,
			lods = [
				["models/powerpole-large-body-hd.stl", high, shadow],
				["models/powerpole-large-body-ld.stl", medium, shadow],
				["models/powerpole-large-body-vld.stl", verylow, noshadow],
			],
		},
	],
	materials = {
		"steel-frame" = 10,
		"copper-wire" = 10,
	},
})

